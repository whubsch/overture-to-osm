window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "overturetoosm", "modulename": "overturetoosm", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "overturetoosm.objects", "modulename": "overturetoosm.objects", "kind": "module", "doc": "<p>Pydantic models needed throughout the project.</p>\n"}, {"fullname": "overturetoosm.objects.Sources", "modulename": "overturetoosm.objects", "qualname": "Sources", "kind": "class", "doc": "<p>Overture sources model.</p>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "overturetoosm.objects.Sources.property", "modulename": "overturetoosm.objects", "qualname": "Sources.property", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "overturetoosm.objects.Sources.dataset", "modulename": "overturetoosm.objects", "qualname": "Sources.dataset", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "overturetoosm.objects.Sources.record_id", "modulename": "overturetoosm.objects", "qualname": "Sources.record_id", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "overturetoosm.objects.Sources.confidence", "modulename": "overturetoosm.objects", "qualname": "Sources.confidence", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float | None"}, {"fullname": "overturetoosm.objects.Sources.model_config", "modulename": "overturetoosm.objects", "qualname": "Sources.model_config", "kind": "variable", "doc": "<p></p>\n", "default_value": "{}"}, {"fullname": "overturetoosm.objects.Sources.model_fields", "modulename": "overturetoosm.objects", "qualname": "Sources.model_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;property&#x27;: FieldInfo(annotation=str, required=True), &#x27;dataset&#x27;: FieldInfo(annotation=str, required=True), &#x27;record_id&#x27;: FieldInfo(annotation=str, required=True), &#x27;confidence&#x27;: FieldInfo(annotation=Union[float, NoneType], required=True)}"}, {"fullname": "overturetoosm.objects.Sources.model_computed_fields", "modulename": "overturetoosm.objects", "qualname": "Sources.model_computed_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{}"}, {"fullname": "overturetoosm.objects.Names", "modulename": "overturetoosm.objects", "qualname": "Names", "kind": "class", "doc": "<p>Overture names model.</p>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "overturetoosm.objects.Names.primary", "modulename": "overturetoosm.objects", "qualname": "Names.primary", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "overturetoosm.objects.Names.common", "modulename": "overturetoosm.objects", "qualname": "Names.common", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str | None"}, {"fullname": "overturetoosm.objects.Names.rules", "modulename": "overturetoosm.objects", "qualname": "Names.rules", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str | None"}, {"fullname": "overturetoosm.objects.Names.model_config", "modulename": "overturetoosm.objects", "qualname": "Names.model_config", "kind": "variable", "doc": "<p></p>\n", "default_value": "{}"}, {"fullname": "overturetoosm.objects.Names.model_fields", "modulename": "overturetoosm.objects", "qualname": "Names.model_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;primary&#x27;: FieldInfo(annotation=str, required=True), &#x27;common&#x27;: FieldInfo(annotation=Union[str, NoneType], required=True), &#x27;rules&#x27;: FieldInfo(annotation=Union[str, NoneType], required=True)}"}, {"fullname": "overturetoosm.objects.Names.model_computed_fields", "modulename": "overturetoosm.objects", "qualname": "Names.model_computed_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{}"}, {"fullname": "overturetoosm.objects.Addresses", "modulename": "overturetoosm.objects", "qualname": "Addresses", "kind": "class", "doc": "<p>Overture addresses model.</p>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "overturetoosm.objects.Addresses.freeform", "modulename": "overturetoosm.objects", "qualname": "Addresses.freeform", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str | None"}, {"fullname": "overturetoosm.objects.Addresses.locality", "modulename": "overturetoosm.objects", "qualname": "Addresses.locality", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str | None"}, {"fullname": "overturetoosm.objects.Addresses.postcode", "modulename": "overturetoosm.objects", "qualname": "Addresses.postcode", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str | None"}, {"fullname": "overturetoosm.objects.Addresses.region", "modulename": "overturetoosm.objects", "qualname": "Addresses.region", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str | None"}, {"fullname": "overturetoosm.objects.Addresses.country", "modulename": "overturetoosm.objects", "qualname": "Addresses.country", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str | None"}, {"fullname": "overturetoosm.objects.Addresses.model_config", "modulename": "overturetoosm.objects", "qualname": "Addresses.model_config", "kind": "variable", "doc": "<p></p>\n", "default_value": "{}"}, {"fullname": "overturetoosm.objects.Addresses.model_fields", "modulename": "overturetoosm.objects", "qualname": "Addresses.model_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;freeform&#x27;: FieldInfo(annotation=Union[str, NoneType], required=True), &#x27;locality&#x27;: FieldInfo(annotation=Union[str, NoneType], required=True), &#x27;postcode&#x27;: FieldInfo(annotation=Union[str, NoneType], required=True), &#x27;region&#x27;: FieldInfo(annotation=Union[str, NoneType], required=True), &#x27;country&#x27;: FieldInfo(annotation=Union[str, NoneType], required=True)}"}, {"fullname": "overturetoosm.objects.Addresses.model_computed_fields", "modulename": "overturetoosm.objects", "qualname": "Addresses.model_computed_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{}"}, {"fullname": "overturetoosm.objects.Categories", "modulename": "overturetoosm.objects", "qualname": "Categories", "kind": "class", "doc": "<p>Overture categories model.</p>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "overturetoosm.objects.Categories.main", "modulename": "overturetoosm.objects", "qualname": "Categories.main", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "overturetoosm.objects.Categories.alternate", "modulename": "overturetoosm.objects", "qualname": "Categories.alternate", "kind": "variable", "doc": "<p></p>\n", "annotation": ": list[str] | None"}, {"fullname": "overturetoosm.objects.Categories.model_config", "modulename": "overturetoosm.objects", "qualname": "Categories.model_config", "kind": "variable", "doc": "<p></p>\n", "default_value": "{}"}, {"fullname": "overturetoosm.objects.Categories.model_fields", "modulename": "overturetoosm.objects", "qualname": "Categories.model_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;main&#x27;: FieldInfo(annotation=str, required=True), &#x27;alternate&#x27;: FieldInfo(annotation=Union[list[str], NoneType], required=True)}"}, {"fullname": "overturetoosm.objects.Categories.model_computed_fields", "modulename": "overturetoosm.objects", "qualname": "Categories.model_computed_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{}"}, {"fullname": "overturetoosm.objects.Brand", "modulename": "overturetoosm.objects", "qualname": "Brand", "kind": "class", "doc": "<p>Overture brand model.</p>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "overturetoosm.objects.Brand.wikidata", "modulename": "overturetoosm.objects", "qualname": "Brand.wikidata", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str | None"}, {"fullname": "overturetoosm.objects.Brand.names", "modulename": "overturetoosm.objects", "qualname": "Brand.names", "kind": "variable", "doc": "<p></p>\n", "annotation": ": overturetoosm.objects.Names"}, {"fullname": "overturetoosm.objects.Brand.model_config", "modulename": "overturetoosm.objects", "qualname": "Brand.model_config", "kind": "variable", "doc": "<p></p>\n", "default_value": "{}"}, {"fullname": "overturetoosm.objects.Brand.model_fields", "modulename": "overturetoosm.objects", "qualname": "Brand.model_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;wikidata&#x27;: FieldInfo(annotation=Union[str, NoneType], required=True), &#x27;names&#x27;: FieldInfo(annotation=Names, required=True)}"}, {"fullname": "overturetoosm.objects.Brand.model_computed_fields", "modulename": "overturetoosm.objects", "qualname": "Brand.model_computed_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{}"}, {"fullname": "overturetoosm.objects.PlaceProps", "modulename": "overturetoosm.objects", "qualname": "PlaceProps", "kind": "class", "doc": "<p>Overture properties model.</p>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "overturetoosm.objects.PlaceProps.id", "modulename": "overturetoosm.objects", "qualname": "PlaceProps.id", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "overturetoosm.objects.PlaceProps.version", "modulename": "overturetoosm.objects", "qualname": "PlaceProps.version", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "overturetoosm.objects.PlaceProps.update_time", "modulename": "overturetoosm.objects", "qualname": "PlaceProps.update_time", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "overturetoosm.objects.PlaceProps.sources", "modulename": "overturetoosm.objects", "qualname": "PlaceProps.sources", "kind": "variable", "doc": "<p></p>\n", "annotation": ": list[overturetoosm.objects.Sources]"}, {"fullname": "overturetoosm.objects.PlaceProps.names", "modulename": "overturetoosm.objects", "qualname": "PlaceProps.names", "kind": "variable", "doc": "<p></p>\n", "annotation": ": overturetoosm.objects.Names"}, {"fullname": "overturetoosm.objects.PlaceProps.brand", "modulename": "overturetoosm.objects", "qualname": "PlaceProps.brand", "kind": "variable", "doc": "<p></p>\n", "annotation": ": overturetoosm.objects.Brand | None"}, {"fullname": "overturetoosm.objects.PlaceProps.categories", "modulename": "overturetoosm.objects", "qualname": "PlaceProps.categories", "kind": "variable", "doc": "<p></p>\n", "annotation": ": overturetoosm.objects.Categories | None"}, {"fullname": "overturetoosm.objects.PlaceProps.confidence", "modulename": "overturetoosm.objects", "qualname": "PlaceProps.confidence", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "overturetoosm.objects.PlaceProps.websites", "modulename": "overturetoosm.objects", "qualname": "PlaceProps.websites", "kind": "variable", "doc": "<p></p>\n", "annotation": ": list[str] | None"}, {"fullname": "overturetoosm.objects.PlaceProps.socials", "modulename": "overturetoosm.objects", "qualname": "PlaceProps.socials", "kind": "variable", "doc": "<p></p>\n", "annotation": ": list[str] | None"}, {"fullname": "overturetoosm.objects.PlaceProps.phones", "modulename": "overturetoosm.objects", "qualname": "PlaceProps.phones", "kind": "variable", "doc": "<p></p>\n", "annotation": ": list[str] | None"}, {"fullname": "overturetoosm.objects.PlaceProps.addresses", "modulename": "overturetoosm.objects", "qualname": "PlaceProps.addresses", "kind": "variable", "doc": "<p></p>\n", "annotation": ": list[overturetoosm.objects.Addresses]"}, {"fullname": "overturetoosm.objects.PlaceProps.model_config", "modulename": "overturetoosm.objects", "qualname": "PlaceProps.model_config", "kind": "variable", "doc": "<p></p>\n", "default_value": "{}"}, {"fullname": "overturetoosm.objects.PlaceProps.model_fields", "modulename": "overturetoosm.objects", "qualname": "PlaceProps.model_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;id&#x27;: FieldInfo(annotation=str, required=True), &#x27;version&#x27;: FieldInfo(annotation=int, required=True), &#x27;update_time&#x27;: FieldInfo(annotation=str, required=True), &#x27;sources&#x27;: FieldInfo(annotation=list[Sources], required=True), &#x27;names&#x27;: FieldInfo(annotation=Names, required=True), &#x27;brand&#x27;: FieldInfo(annotation=Union[Brand, NoneType], required=False, default=None), &#x27;categories&#x27;: FieldInfo(annotation=Union[Categories, NoneType], required=False, default=None), &#x27;confidence&#x27;: FieldInfo(annotation=float, required=True, metadata=[Ge(ge=0.0), Le(le=1.0)]), &#x27;websites&#x27;: FieldInfo(annotation=Union[list[str], NoneType], required=False, default=None), &#x27;socials&#x27;: FieldInfo(annotation=Union[list[str], NoneType], required=False, default=None), &#x27;phones&#x27;: FieldInfo(annotation=Union[list[str], NoneType], required=False, default=None), &#x27;addresses&#x27;: FieldInfo(annotation=list[Addresses], required=True)}"}, {"fullname": "overturetoosm.objects.PlaceProps.model_computed_fields", "modulename": "overturetoosm.objects", "qualname": "PlaceProps.model_computed_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{}"}, {"fullname": "overturetoosm.objects.ConfidenceError", "modulename": "overturetoosm.objects", "qualname": "ConfidenceError", "kind": "class", "doc": "<p>Confidence error exception.</p>\n\n<p>This exception is raised when the confidence level of an item is too low.\nIt contains the original confidence level and the confidence level of the item.</p>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>confidence_level (float):</strong>  The set confidence level.</li>\n<li><strong>confidence_item (float):</strong>  The confidence of the item.</li>\n<li><strong>message (str):</strong>  The error message.</li>\n</ul>\n", "bases": "builtins.Exception"}, {"fullname": "overturetoosm.objects.ConfidenceError.confidence_level", "modulename": "overturetoosm.objects", "qualname": "ConfidenceError.confidence_level", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "overturetoosm.objects.ConfidenceError.confidence_item", "modulename": "overturetoosm.objects", "qualname": "ConfidenceError.confidence_item", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "overturetoosm.objects.ConfidenceError.message", "modulename": "overturetoosm.objects", "qualname": "ConfidenceError.message", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "overturetoosm.objects.UnmatchedError", "modulename": "overturetoosm.objects", "qualname": "UnmatchedError", "kind": "class", "doc": "<p>Unmatched category error.</p>\n\n<p>This exception is raised when an item's Overture category does not have a\ncorresponding OSM definition. Edit\n<a href=\"https://wiki.openstreetmap.org/wiki/Overture_categories\">the OSM Wiki page</a>\nto add a definition to this category.</p>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>category (str):</strong>  The Overture category that is unmatched.</li>\n<li><strong>message (str):</strong>  The error message.</li>\n</ul>\n", "bases": "builtins.Exception"}, {"fullname": "overturetoosm.objects.UnmatchedError.category", "modulename": "overturetoosm.objects", "qualname": "UnmatchedError.category", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "overturetoosm.objects.UnmatchedError.message", "modulename": "overturetoosm.objects", "qualname": "UnmatchedError.message", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "overturetoosm.places", "modulename": "overturetoosm.places", "kind": "module", "doc": "<p>Convert Overture's <code>places</code> features to OSM tags.</p>\n"}, {"fullname": "overturetoosm.places.process_props", "modulename": "overturetoosm.places", "qualname": "process_props", "kind": "function", "doc": "<p>Convert Overture's properties to OSM tags.</p>\n\n<p>Example usage:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">json</span>\n<span class=\"kn\">from</span> <span class=\"nn\">overturetoosm.places</span> <span class=\"kn\">import</span> <span class=\"n\">process_props</span>\n\n<span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s2\">&quot;overture.geojson&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;r&quot;</span><span class=\"p\">,</span> <span class=\"n\">encoding</span><span class=\"o\">=</span><span class=\"s2\">&quot;utf-8&quot;</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n    <span class=\"n\">contents</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">)</span>\n\n    <span class=\"k\">for</span> <span class=\"n\">feature</span> <span class=\"ow\">in</span> <span class=\"n\">contents</span><span class=\"p\">[</span><span class=\"s2\">&quot;features&quot;</span><span class=\"p\">]:</span>\n        <span class=\"n\">feature</span><span class=\"p\">[</span><span class=\"s2\">&quot;properties&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">process_props</span><span class=\"p\">(</span><span class=\"n\">feature</span><span class=\"p\">[</span><span class=\"s2\">&quot;properties&quot;</span><span class=\"p\">])</span>\n\n<span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s2\">&quot;overture_out.geojson&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;w+&quot;</span><span class=\"p\">,</span> <span class=\"n\">encoding</span><span class=\"o\">=</span><span class=\"s2\">&quot;utf-8&quot;</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">x</span><span class=\"p\">:</span>\n    <span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">dump</span><span class=\"p\">(</span><span class=\"n\">contents</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">indent</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>props (dict):</strong>  The feature properties from the Overture GeoJSON.</li>\n<li><strong>region_tag (str, optional):</strong>  What tag to convert Overture's <code>region</code> tag to.\nDefaults to <code>addr:state</code>.</li>\n<li><strong>confidence (float, optional):</strong>  The minimum confidence level. Defaults to 0.0.</li>\n<li><strong>unmatched (Literal[\"error\", \"force\", \"ignore\"], optional):</strong>  How to handle\nunmatched Overture categories. The \"error\" option raises an UnmatchedError\nexception, \"force\" puts the category into the <code>type</code> key, and \"ignore\"\nonly returns other properties. Defaults to \"ignore\".</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>dict[str, str]: The reshaped and converted properties in OSM's flat str:str schema.</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong><code>UnmatchedError</code>:</strong>  Raised if <code>unmatched</code> is set to <code>error</code> and the Overture category\nhas no OSM definition.</li>\n<li><strong><code>ConfidenceError</code>:</strong>  Raised if the confidence level is set above a feature's confidence.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">props</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">region_tag</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;addr:state&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">confidence</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span>,</span><span class=\"param\">\t<span class=\"n\">unmatched</span><span class=\"p\">:</span> <span class=\"n\">Literal</span><span class=\"p\">[</span><span class=\"s1\">&#39;error&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;force&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;ignore&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;ignore&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "overturetoosm.places.process_geojson", "modulename": "overturetoosm.places", "qualname": "process_geojson", "kind": "function", "doc": "<p>Convert an Overture <code>place</code> GeoJSON to one that follows OSM's schema.</p>\n\n<p>Example usage:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">json</span>\n<span class=\"kn\">from</span> <span class=\"nn\">overturetoosm.places</span> <span class=\"kn\">import</span> <span class=\"n\">process_geojson</span>\n\n<span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s2\">&quot;overture.geojson&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;r&quot;</span><span class=\"p\">,</span> <span class=\"n\">encoding</span><span class=\"o\">=</span><span class=\"s2\">&quot;utf-8&quot;</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n    <span class=\"n\">contents</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">)</span>\n    <span class=\"n\">geojson</span> <span class=\"o\">=</span> <span class=\"n\">process_geojson</span><span class=\"p\">(</span><span class=\"n\">contents</span><span class=\"p\">)</span>\n\n<span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s2\">&quot;overture_out.geojson&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;w+&quot;</span><span class=\"p\">,</span> <span class=\"n\">encoding</span><span class=\"o\">=</span><span class=\"s2\">&quot;utf-8&quot;</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">x</span><span class=\"p\">:</span>\n    <span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">dump</span><span class=\"p\">(</span><span class=\"n\">geojson</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">indent</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>geojson (dict):</strong>  The dictionary representation of the Overture GeoJSON.</li>\n<li><strong>region_tag (str, optional):</strong>  What tag to convert Overture's <code>region</code> tag to.\nDefaults to <code>addr:state</code>.</li>\n<li><strong>confidence (float, optional):</strong>  The minimum confidence level. Defaults to 0.0.</li>\n<li><strong>unmatched (Literal[\"error\", \"force\", \"ignore\"], optional):</strong>  How to handle unmatched Overture\ncategories. The \"error\" option skips unmatched places, \"force\" puts the\ncategory into the <code>type</code> key, and \"ignore\" only returns other properties.\nDefaults to \"ignore\".</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>dict: The dictionary representation of the GeoJSON that follows OSM's schema.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">geojson</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">region_tag</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;addr:state&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">confidence</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span>,</span><span class=\"param\">\t<span class=\"n\">unmatched</span><span class=\"p\">:</span> <span class=\"n\">Literal</span><span class=\"p\">[</span><span class=\"s1\">&#39;error&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;force&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;ignore&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;ignore&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "overturetoosm.resources", "modulename": "overturetoosm.resources", "kind": "module", "doc": "<p>A mapping of Overture tags to OSM tags.</p>\n"}, {"fullname": "overturetoosm.resources.tags", "modulename": "overturetoosm.resources", "qualname": "tags", "kind": "variable", "doc": "<p>dict[str, dict[str, str]]: A mapping of Overture to OSM tags,\nexcluding blank values. This is downstream from the <code>scripts/tag.json</code>\nfile.</p>\n", "annotation": ": dict[str, dict[str, str]]", "default_value": "{&#x27;eat_and_drink&#x27;: {&#x27;amenity&#x27;: &#x27;restaurant&#x27;}, &#x27;restaurant&#x27;: {&#x27;amenity&#x27;: &#x27;restaurant&#x27;}, &#x27;afghan_restaurant&#x27;: {&#x27;amenity&#x27;: &#x27;restaurant&#x27;, &#x27;cuisine&#x27;: &#x27;afghan&#x27;}, &#x27;african_restaurant&#x27;: {&#x27;amenity&#x27;: &#x27;restaurant&#x27;, &#x27;cuisine&#x27;: &#x27;african&#x27;}, &#x27;ethiopian_restaurant&#x27;: {&#x27;amenity&#x27;: &#x27;restaurant&#x27;, &#x27;cuisine&#x27;: &#x27;ethiopian&#x27;}, &#x27;senegalese_restaurant&#x27;: {&#x27;amenity&#x27;: &#x27;restaurant&#x27;, &#x27;cuisine&#x27;: &#x27;senegalese&#x27;}, &#x27;south_african_restaurant&#x27;: {&#x27;amenity&#x27;: &#x27;restaurant&#x27;, &#x27;cuisine&#x27;: &#x27;south_african&#x27;}, &#x27;moroccan_restaurant&#x27;: {&#x27;amenity&#x27;: &#x27;restaurant&#x27;, &#x27;cuisine&#x27;: &#x27;moroccan&#x27;}, &#x27;nigerian_restaurant&#x27;: {&#x27;amenity&#x27;: &#x27;restaurant&#x27;, &#x27;cuisine&#x27;: &#x27;nigerian&#x27;}, &#x27;american_restaurant&#x27;: {&#x27;amenity&#x27;: &#x27;restaurant&#x27;, &#x27;cuisine&#x27;: &#x27;american&#x27;}, &#x27;arabian_restaurant&#x27;: {&#x27;amenity&#x27;: &#x27;restaurant&#x27;, &#x27;cuisine&#x27;: &#x27;arab&#x27;}, &#x27;belgian_restaurant&#x27;: {&#x27;amenity&#x27;: &#x27;restaurant&#x27;, &#x27;cuisine&#x27;: &#x27;belgian&#x27;}, &#x27;latin_american_restaurant&#x27;: {&#x27;amenity&#x27;: &#x27;restaurant&#x27;, &#x27;cuisine&#x27;: &#x27;latin_american&#x27;}, &#x27;argentine_restaurant&#x27;: {&#x27;amenity&#x27;: &#x27;restaurant&#x27;, &#x27;cuisine&#x27;: &#x27;argentinian&#x27;}, &#x27;belizean_restaurant&#x27;: {&#x27;amenity&#x27;: &#x27;restaurant&#x27;, &#x27;cuisine&#x27;: &#x27;belizean&#x27;}, &#x27;bolivian_restaurant&#x27;: {&#x27;amenity&#x27;: &#x27;restaurant&#x27;, &#x27;cuisine&#x27;: &#x27;bolivian&#x27;}, &#x27;brazilian_restaurant&#x27;: {&#x27;amenity&#x27;: &#x27;restaurant&#x27;, &#x27;cuisine&#x27;: &#x27;brazilian&#x27;}, &#x27;chilean_restaurant&#x27;: {&#x27;amenity&#x27;: &#x27;restaurant&#x27;, &#x27;cuisine&#x27;: &#x27;chilean&#x27;}, &#x27;colombian_restaurant&#x27;: {&#x27;amenity&#x27;: &#x27;restaurant&#x27;, &#x27;cuisine&#x27;: &#x27;colombian&#x27;}, &#x27;costa_rican_restaurant&#x27;: {&#x27;amenity&#x27;: &#x27;restaurant&#x27;, &#x27;cuisine&#x27;: &#x27;costa_rican&#x27;}, &#x27;cuban_restaurant&#x27;: {&#x27;amenity&#x27;: &#x27;restaurant&#x27;, &#x27;cuisine&#x27;: &#x27;cuban&#x27;}, &#x27;ecuadorian_restaurant&#x27;: {&#x27;amenity&#x27;: &#x27;restaurant&#x27;, &#x27;cuisine&#x27;: &#x27;ecuadorian&#x27;}, &#x27;guatemalan_restaurant&#x27;: {&#x27;amenity&#x27;: &#x27;restaurant&#x27;, &#x27;cuisine&#x27;: &#x27;guatemalan&#x27;}, &#x27;honduran_restaurant&#x27;: {&#x27;amenity&#x27;: &#x27;restaurant&#x27;, &#x27;cuisine&#x27;: &#x27;honduran&#x27;}, &#x27;mexican_restaurant&#x27;: {&#x27;amenity&#x27;: &#x27;restaurant&#x27;, &#x27;cuisine&#x27;: &#x27;mexican&#x27;}, &#x27;nicaraguan_restaurant&#x27;: {&#x27;amenity&#x27;: &#x27;restaurant&#x27;, &#x27;cuisine&#x27;: &#x27;nicaraguan&#x27;}, &#x27;panamanian_restaurant&#x27;: {&#x27;amenity&#x27;: &#x27;restaurant&#x27;, &#x27;cuisine&#x27;: &#x27;panamanian&#x27;}, &#x27;paraguayan_restaurant&#x27;: {&#x27;amenity&#x27;: &#x27;restaurant&#x27;, &#x27;cuisine&#x27;: &#x27;paraguayan&#x27;}, &#x27;peruvian_restaurant&#x27;: {&#x27;amenity&#x27;: &#x27;restaurant&#x27;, &#x27;cuisine&#x27;: &#x27;peruvian&#x27;}, &#x27;puerto_rican_restaurant&#x27;: {&#x27;amenity&#x27;: &#x27;restaurant&#x27;}, &#x27;salvadoran_restaurant&#x27;: {&#x27;amenity&#x27;: &#x27;restaurant&#x27;}, &#x27;texmex_restaurant&#x27;: {&#x27;amenity&#x27;: &#x27;restaurant&#x27;, &#x27;cuisine&#x27;: &#x27;tex-mex&#x27;}, &#x27;uruguayan_restaurant&#x27;: {&#x27;amenity&#x27;: &#x27;restaurant&#x27;}, &#x27;venezuelan_restaurant&#x27;: {&#x27;amenity&#x27;: &#x27;restaurant&#x27;, &#x27;cuisine&#x27;: &#x27;venezuelan&#x27;}, &#x27;middle_eastern_restaurant&#x27;: {&#x27;amenity&#x27;: &#x27;restaurant&#x27;, &#x27;cuisine&#x27;: &#x27;middle_eastern&#x27;}, &#x27;armenian_restaurant&#x27;: {&#x27;amenity&#x27;: &#x27;restaurant&#x27;, &#x27;cuisine&#x27;: &#x27;armenian&#x27;}, &#x27;azerbaijani_restaurant&#x27;: {&#x27;amenity&#x27;: &#x27;restaurant&#x27;}, &#x27;egyptian_restaurant&#x27;: {&#x27;amenity&#x27;: &#x27;restaurant&#x27;, &#x27;cuisine&#x27;: &#x27;egyptian&#x27;}, &#x27;georgian_restaurant&#x27;: {&#x27;amenity&#x27;: &#x27;restaurant&#x27;, &#x27;cuisine&#x27;: &#x27;georgian&#x27;}, &#x27;israeli_restaurant&#x27;: {&#x27;amenity&#x27;: &#x27;restaurant&#x27;, &#x27;cuisine&#x27;: &#x27;israeli&#x27;}, &#x27;kofta_restaurant&#x27;: {&#x27;amenity&#x27;: &#x27;restaurant&#x27;}, &#x27;kurdish_restaurant&#x27;: {&#x27;amenity&#x27;: &#x27;restaurant&#x27;}, &#x27;lebanese_restaurant&#x27;: {&#x27;amenity&#x27;: &#x27;restaurant&#x27;, &#x27;cuisine&#x27;: &#x27;lebanese&#x27;}, &#x27;persian_iranian_restaurant&#x27;: {&#x27;amenity&#x27;: &#x27;restaurant&#x27;, &#x27;cuisine&#x27;: &#x27;persian&#x27;}, &#x27;syrian_restaurant&#x27;: {&#x27;amenity&#x27;: &#x27;restaurant&#x27;, &#x27;cuisine&#x27;: &#x27;syrian&#x27;}, &#x27;turkish_restaurant&#x27;: {&#x27;amenity&#x27;: &#x27;restaurant&#x27;, &#x27;cuisine&#x27;: &#x27;turkish&#x27;}, &#x27;asian_restaurant&#x27;: {&#x27;amenity&#x27;: &#x27;restaurant&#x27;, &#x27;cuisine&#x27;: &#x27;asian&#x27;}, &#x27;asian_fusion_restaurant&#x27;: {&#x27;amenity&#x27;: &#x27;restaurant&#x27;, &#x27;cuisine&#x27;: &#x27;fusion&#x27;}, &#x27;pan_asian_restaurant&#x27;: {&#x27;amenity&#x27;: &#x27;restaurant&#x27;}, &#x27;burmese_restaurant&#x27;: {&#x27;amenity&#x27;: &#x27;restaurant&#x27;}, &#x27;cambodian_restaurant&#x27;: {&#x27;amenity&#x27;: &#x27;restaurant&#x27;, &#x27;cuisine&#x27;: &#x27;cambodian&#x27;}, &#x27;chinese_restaurant&#x27;: {&#x27;amenity&#x27;: &#x27;restaurant&#x27;, &#x27;cuisine&#x27;: &#x27;chinese&#x27;}, &#x27;dim_sum_restaurant&#x27;: {&#x27;amenity&#x27;: &#x27;restaurant&#x27;}, &#x27;filipino_restaurant&#x27;: {&#x27;amenity&#x27;: &#x27;restaurant&#x27;, &#x27;cuisine&#x27;: &#x27;filipino&#x27;}, &#x27;indo_chinese_restaurant&#x27;: {&#x27;amenity&#x27;: &#x27;restaurant&#x27;}, &#x27;indonesian_restaurant&#x27;: {&#x27;amenity&#x27;: &#x27;restaurant&#x27;, &#x27;cuisine&#x27;: &#x27;indonesian&#x27;}, &#x27;japanese_restaurant&#x27;: {&#x27;amenity&#x27;: &#x27;restaurant&#x27;, &#x27;cuisine&#x27;: &#x27;japanese&#x27;}, &#x27;korean_restaurant&#x27;: {&#x27;amenity&#x27;: &#x27;restaurant&#x27;, &#x27;cuisine&#x27;: &#x27;korean&#x27;}, &#x27;sushi_restaurant&#x27;: {&#x27;amenity&#x27;: &#x27;restaurant&#x27;, &#x27;cuisine&#x27;: &#x27;sushi&#x27;}, &#x27;laotian_restaurant&#x27;: {&#x27;amenity&#x27;: &#x27;restaurant&#x27;}, &#x27;malaysian_restaurant&#x27;: {&#x27;amenity&#x27;: &#x27;restaurant&#x27;, &#x27;cuisine&#x27;: &#x27;malaysian&#x27;}, &#x27;mongolian_restaurant&#x27;: {&#x27;amenity&#x27;: &#x27;restaurant&#x27;, &#x27;cuisine&#x27;: &#x27;mongolian&#x27;}, &#x27;noodles_restaurant&#x27;: {&#x27;amenity&#x27;: &#x27;restaurant&#x27;, &#x27;cuisine&#x27;: &#x27;noodle&#x27;}, &#x27;singaporean_restaurant&#x27;: {&#x27;amenity&#x27;: &#x27;restaurant&#x27;, &#x27;cuisine&#x27;: &#x27;singaporean&#x27;}, &#x27;taiwanese_restaurant&#x27;: {&#x27;amenity&#x27;: &#x27;restaurant&#x27;, &#x27;cuisine&#x27;: &#x27;taiwanese&#x27;}, &#x27;thai_restaurant&#x27;: {&#x27;amenity&#x27;: &#x27;restaurant&#x27;, &#x27;cuisine&#x27;: &#x27;thai&#x27;}, &#x27;vietnamese_restaurant&#x27;: {&#x27;amenity&#x27;: &#x27;restaurant&#x27;, &#x27;cuisine&#x27;: &#x27;vietnamese&#x27;}, &#x27;australian_restaurant&#x27;: {&#x27;amenity&#x27;: &#x27;restaurant&#x27;, &#x27;cuisine&#x27;: &#x27;australian&#x27;}, &#x27;austrian_restaurant&#x27;: {&#x27;amenity&#x27;: &#x27;restaurant&#x27;, &#x27;cuisine&#x27;: &#x27;austrian&#x27;}, &#x27;bangladeshi_restaurant&#x27;: {&#x27;amenity&#x27;: &#x27;restaurant&#x27;, &#x27;cuisine&#x27;: &#x27;bangladeshi&#x27;}, &#x27;indian_restaurant&#x27;: {&#x27;amenity&#x27;: &#x27;restaurant&#x27;, &#x27;cuisine&#x27;: &#x27;indian&#x27;}, &#x27;basque_restaurant&#x27;: {&#x27;amenity&#x27;: &#x27;restaurant&#x27;, &#x27;cuisine&#x27;: &#x27;basque&#x27;}, &#x27;british_restaurant&#x27;: {&#x27;amenity&#x27;: &#x27;restaurant&#x27;, &#x27;cuisine&#x27;: &#x27;british&#x27;}, &#x27;eastern_european_restaurant&#x27;: {&#x27;amenity&#x27;: &#x27;restaurant&#x27;}, &#x27;belarusian_restaurant&#x27;: {&#x27;amenity&#x27;: &#x27;restaurant&#x27;}, &#x27;bulgarian_restaurant&#x27;: {&#x27;amenity&#x27;: &#x27;restaurant&#x27;, &#x27;cuisine&#x27;: &#x27;bulgarian&#x27;}, &#x27;romanian_restaurant&#x27;: {&#x27;amenity&#x27;: &#x27;restaurant&#x27;, &#x27;cuisine&#x27;: &#x27;romanian&#x27;}, &#x27;tatar_restaurant&#x27;: {&#x27;amenity&#x27;: &#x27;restaurant&#x27;}, &#x27;ukrainian_restaurant&#x27;: {&#x27;amenity&#x27;: &#x27;restaurant&#x27;, &#x27;cuisine&#x27;: &#x27;ukrainian&#x27;}, &#x27;french_restaurant&#x27;: {&#x27;amenity&#x27;: &#x27;restaurant&#x27;, &#x27;cuisine&#x27;: &#x27;french&#x27;}, &#x27;cajun_creole_restaurant&#x27;: {&#x27;amenity&#x27;: &#x27;restaurant&#x27;, &#x27;cuisine&#x27;: &#x27;cajun&#x27;}, &#x27;canadian_restaurant&#x27;: {&#x27;amenity&#x27;: &#x27;restaurant&#x27;}, &#x27;caribbean_restaurant&#x27;: {&#x27;amenity&#x27;: &#x27;restaurant&#x27;, &#x27;cuisine&#x27;: &#x27;caribbean&#x27;}, &#x27;dominican_restaurant&#x27;: {&#x27;amenity&#x27;: &#x27;restaurant&#x27;}, &#x27;haitian_restaurant&#x27;: {&#x27;amenity&#x27;: &#x27;restaurant&#x27;}, &#x27;jamaican_restaurant&#x27;: {&#x27;amenity&#x27;: &#x27;restaurant&#x27;, &#x27;cuisine&#x27;: &#x27;jamaican&#x27;}, &#x27;trinidadian_restaurant&#x27;: {&#x27;amenity&#x27;: &#x27;restaurant&#x27;}, &#x27;german_restaurant&#x27;: {&#x27;amenity&#x27;: &#x27;restaurant&#x27;, &#x27;cuisine&#x27;: &#x27;german&#x27;}, &#x27;catalan_restaurant&#x27;: {&#x27;amenity&#x27;: &#x27;restaurant&#x27;}, &#x27;italian_restaurant&#x27;: {&#x27;amenity&#x27;: &#x27;restaurant&#x27;, &#x27;cuisine&#x27;: &#x27;italian&#x27;}, &#x27;czech_restaurant&#x27;: {&#x27;amenity&#x27;: &#x27;restaurant&#x27;, &#x27;cuisine&#x27;: &#x27;czech&#x27;}, &#x27;mediterranean_restaurant&#x27;: {&#x27;amenity&#x27;: &#x27;restaurant&#x27;, &#x27;cuisine&#x27;: &#x27;mediterranean&#x27;}, &#x27;greek_restaurant&#x27;: {&#x27;amenity&#x27;: &#x27;restaurant&#x27;, &#x27;cuisine&#x27;: &#x27;greek&#x27;}, &#x27;guamanian_restaurant&#x27;: {&#x27;amenity&#x27;: &#x27;restaurant&#x27;}, &#x27;hawaiian_restaurant&#x27;: {&#x27;amenity&#x27;: &#x27;restaurant&#x27;, &#x27;cuisine&#x27;: &#x27;hawaiian&#x27;}, &#x27;himalayan_nepalese_restaurant&#x27;: {&#x27;amenity&#x27;: &#x27;restaurant&#x27;}, &#x27;hungarian_restaurant&#x27;: {&#x27;amenity&#x27;: &#x27;restaurant&#x27;, &#x27;cuisine&#x27;: &#x27;hungarian&#x27;}, &#x27;iberian_restaurant&#x27;: {&#x27;amenity&#x27;: &#x27;restaurant&#x27;}, &#x27;irish_restaurant&#x27;: {&#x27;amenity&#x27;: &#x27;restaurant&#x27;, &#x27;cuisine&#x27;: &#x27;irish&#x27;}, &#x27;jewish_restaurant&#x27;: {&#x27;amenity&#x27;: &#x27;restaurant&#x27;}, &#x27;international_restaurant&#x27;: {&#x27;amenity&#x27;: &#x27;restaurant&#x27;}, &#x27;european_restaurant&#x27;: {&#x27;amenity&#x27;: &#x27;restaurant&#x27;}, &#x27;oriental_restaurant&#x27;: {&#x27;amenity&#x27;: &#x27;restaurant&#x27;}, &#x27;pakistani_restaurant&#x27;: {&#x27;amenity&#x27;: &#x27;restaurant&#x27;, &#x27;cuisine&#x27;: &#x27;pakistani&#x27;}, &#x27;polish_restaurant&#x27;: {&#x27;amenity&#x27;: &#x27;restaurant&#x27;, &#x27;cuisine&#x27;: &#x27;polish&#x27;}, &#x27;polynesian_restaurant&#x27;: {&#x27;amenity&#x27;: &#x27;restaurant&#x27;}, &#x27;portuguese_restaurant&#x27;: {&#x27;amenity&#x27;: &#x27;restaurant&#x27;, &#x27;cuisine&#x27;: &#x27;portuguese&#x27;}, &#x27;russian_restaurant&#x27;: {&#x27;amenity&#x27;: &#x27;restaurant&#x27;, &#x27;cuisine&#x27;: &#x27;russian&#x27;}, &#x27;scandinavian_restaurant&#x27;: {&#x27;amenity&#x27;: &#x27;restaurant&#x27;}, &#x27;danish_restaurant&#x27;: {&#x27;amenity&#x27;: &#x27;restaurant&#x27;}, &#x27;norwegian_restaurant&#x27;: {&#x27;amenity&#x27;: &#x27;restaurant&#x27;}, &#x27;scottish_restaurant&#x27;: {&#x27;amenity&#x27;: &#x27;restaurant&#x27;}, &#x27;seafood_restaurant&#x27;: {&#x27;amenity&#x27;: &#x27;restaurant&#x27;, &#x27;cuisine&#x27;: &#x27;seafood&#x27;}, &#x27;serbo_croation_restaurant&#x27;: {&#x27;amenity&#x27;: &#x27;restaurant&#x27;}, &#x27;slovakian_restaurant&#x27;: {&#x27;amenity&#x27;: &#x27;restaurant&#x27;}, &#x27;southern_restaurant&#x27;: {&#x27;amenity&#x27;: &#x27;restaurant&#x27;}, &#x27;spanish_restaurant&#x27;: {&#x27;amenity&#x27;: &#x27;restaurant&#x27;, &#x27;cuisine&#x27;: &#x27;spanish&#x27;}, &#x27;sri_lankan_restaurant&#x27;: {&#x27;amenity&#x27;: &#x27;restaurant&#x27;}, &#x27;swiss_restaurant&#x27;: {&#x27;amenity&#x27;: &#x27;restaurant&#x27;}, &#x27;uzbek_restaurant&#x27;: {&#x27;amenity&#x27;: &#x27;restaurant&#x27;}, &#x27;molecular_gastronomy_restaurant&#x27;: {&#x27;amenity&#x27;: &#x27;restaurant&#x27;}, &#x27;haute_cuisine_restaurant&#x27;: {&#x27;amenity&#x27;: &#x27;restaurant&#x27;}, &#x27;brasserie&#x27;: {&#x27;amenity&#x27;: &#x27;restaurant&#x27;}, &#x27;buffet_restaurant&#x27;: {&#x27;amenity&#x27;: &#x27;restaurant&#x27;}, &#x27;barbecue_restaurant&#x27;: {&#x27;amenity&#x27;: &#x27;restaurant&#x27;}, &#x27;burger_restaurant&#x27;: {&#x27;amenity&#x27;: &#x27;restaurant&#x27;, &#x27;cuisine&#x27;: &#x27;burger&#x27;}, &#x27;cheesesteak_restaurant&#x27;: {&#x27;amenity&#x27;: &#x27;restaurant&#x27;}, &#x27;chicken_restaurant&#x27;: {&#x27;amenity&#x27;: &#x27;restaurant&#x27;}, &#x27;chicken_wings_restaurant&#x27;: {&#x27;amenity&#x27;: &#x27;restaurant&#x27;}, &#x27;dog_meat_restaurant&#x27;: {&#x27;amenity&#x27;: &#x27;restaurant&#x27;}, &#x27;dumpling_restaurant&#x27;: {&#x27;amenity&#x27;: &#x27;restaurant&#x27;}, &#x27;fast_food_restaurant&#x27;: {&#x27;amenity&#x27;: &#x27;fast_food&#x27;}, &#x27;fishchbroetchen_restaurant&#x27;: {&#x27;amenity&#x27;: &#x27;restaurant&#x27;}, &#x27;fish_restaurant&#x27;: {&#x27;amenity&#x27;: &#x27;restaurant&#x27;}, &#x27;fish_and_chips_restaurant&#x27;: {&#x27;amenity&#x27;: &#x27;restaurant&#x27;}, &#x27;fondue_restaurant&#x27;: {&#x27;amenity&#x27;: &#x27;restaurant&#x27;}, &#x27;gluten_free_restaurant&#x27;: {&#x27;amenity&#x27;: &#x27;restaurant&#x27;}, &#x27;baozi_restaurant&#x27;: {&#x27;amenity&#x27;: &#x27;restaurant&#x27;}, &#x27;halal_restaurant&#x27;: {&#x27;amenity&#x27;: &#x27;restaurant&#x27;}, &#x27;bistro&#x27;: {&#x27;amenity&#x27;: &#x27;restaurant&#x27;}, &#x27;health_food_restaurant&#x27;: {&#x27;amenity&#x27;: &#x27;restaurant&#x27;}, &#x27;kosher_restaurant&#x27;: {&#x27;amenity&#x27;: &#x27;restaurant&#x27;}, &#x27;comfort_food_restaurant&#x27;: {&#x27;amenity&#x27;: &#x27;restaurant&#x27;}, &#x27;meat_restaurant&#x27;: {&#x27;amenity&#x27;: &#x27;restaurant&#x27;}, &#x27;curry_sausage_restaurant&#x27;: {&#x27;amenity&#x27;: &#x27;restaurant&#x27;}, &#x27;diner&#x27;: {&#x27;amenity&#x27;: &#x27;restaurant&#x27;}, &#x27;nasi_restaurant&#x27;: {&#x27;amenity&#x27;: &#x27;restaurant&#x27;}, &#x27;flatbread_restaurant&#x27;: {&#x27;amenity&#x27;: &#x27;restaurant&#x27;}, &#x27;food_court&#x27;: {&#x27;amenity&#x27;: &#x27;food_court&#x27;}, &#x27;gastropub&#x27;: {&#x27;amenity&#x27;: &#x27;restaurant&#x27;}, &#x27;pizza_restaurant&#x27;: {&#x27;amenity&#x27;: &#x27;restaurant&#x27;, &#x27;cuisine&#x27;: &#x27;pizza&#x27;}, &#x27;pop_up_restaurant&#x27;: {&#x27;amenity&#x27;: &#x27;restaurant&#x27;}, &#x27;poutinerie_restaurant&#x27;: {&#x27;amenity&#x27;: &#x27;restaurant&#x27;}, &#x27;vegan_restaurant&#x27;: {&#x27;amenity&#x27;: &#x27;restaurant&#x27;, &#x27;diet:vegan&#x27;: &#x27;yes&#x27;}, &#x27;vegetarian_restaurant&#x27;: {&#x27;amenity&#x27;: &#x27;restaurant&#x27;, &#x27;diet:vegetarian&#x27;: &#x27;yes&#x27;}, &#x27;wok_restaurant&#x27;: {&#x27;amenity&#x27;: &#x27;restaurant&#x27;}, &#x27;wrap_restaurant&#x27;: {&#x27;amenity&#x27;: &#x27;restaurant&#x27;}, &#x27;piadina_restaurant&#x27;: {&#x27;amenity&#x27;: &#x27;restaurant&#x27;}, &#x27;pigs_trotters_restaurant&#x27;: {&#x27;amenity&#x27;: &#x27;restaurant&#x27;}, &#x27;potato_restaurant&#x27;: {&#x27;amenity&#x27;: &#x27;restaurant&#x27;}, &#x27;rotisserie_chicken_restaurant&#x27;: {&#x27;amenity&#x27;: &#x27;restaurant&#x27;, &#x27;cuisine&#x27;: &#x27;chicken&#x27;}, &#x27;schnitzel_restaurant&#x27;: {&#x27;amenity&#x27;: &#x27;restaurant&#x27;}, &#x27;steakhouse&#x27;: {&#x27;amenity&#x27;: &#x27;restaurant&#x27;, &#x27;cuisine&#x27;: &#x27;steak_house&#x27;}, &#x27;tapas_bar&#x27;: {&#x27;amenity&#x27;: &#x27;restaurant&#x27;}, &#x27;venison_restaurant&#x27;: {&#x27;amenity&#x27;: &#x27;restaurant&#x27;}, &#x27;wild_game_meats_restaurant&#x27;: {&#x27;amenity&#x27;: &#x27;restaurant&#x27;}, &#x27;falafel_restaurant&#x27;: {&#x27;amenity&#x27;: &#x27;restaurant&#x27;}, &#x27;taco_restaurant&#x27;: {&#x27;amenity&#x27;: &#x27;restaurant&#x27;, &#x27;cuisine&#x27;: &#x27;mexican&#x27;}, &#x27;hot_dog_restaurant&#x27;: {&#x27;amenity&#x27;: &#x27;restaurant&#x27;, &#x27;cuisine&#x27;: &#x27;american&#x27;}, &#x27;soup_restaurant&#x27;: {&#x27;amenity&#x27;: &#x27;restaurant&#x27;}, &#x27;theme_restaurant&#x27;: {&#x27;amenity&#x27;: &#x27;restaurant&#x27;}, &#x27;bar_and_grill_restaurant&#x27;: {&#x27;amenity&#x27;: &#x27;restaurant&#x27;}, &#x27;meatball_restaurant&#x27;: {&#x27;amenity&#x27;: &#x27;restaurant&#x27;}, &#x27;waffle_restaurant&#x27;: {&#x27;amenity&#x27;: &#x27;restaurant&#x27;, &#x27;cuisine&#x27;: &#x27;breakfast&#x27;}, &#x27;breakfast_and_brunch_restaurant&#x27;: {&#x27;amenity&#x27;: &#x27;restaurant&#x27;, &#x27;cuisine&#x27;: &#x27;breakfast&#x27;}, &#x27;pancake_house&#x27;: {&#x27;amenity&#x27;: &#x27;restaurant&#x27;, &#x27;cuisine&#x27;: &#x27;breakfast&#x27;}, &#x27;bagel_restaurant&#x27;: {&#x27;amenity&#x27;: &#x27;restaurant&#x27;}, &#x27;bar&#x27;: {&#x27;amenity&#x27;: &#x27;bar&#x27;}, &#x27;beach_bar&#x27;: {&#x27;amenity&#x27;: &#x27;bar&#x27;}, &#x27;beer_bar&#x27;: {&#x27;amenity&#x27;: &#x27;bar&#x27;}, &#x27;beer_garden&#x27;: {&#x27;amenity&#x27;: &#x27;biergarten&#x27;}, &#x27;brewery&#x27;: {&#x27;craft&#x27;: &#x27;brewery&#x27;}, &#x27;bubble_tea&#x27;: {&#x27;amenity&#x27;: &#x27;cafe&#x27;, &#x27;cuisine&#x27;: &#x27;bubble_tea&#x27;}, &#x27;cocktail_bar&#x27;: {&#x27;amenity&#x27;: &#x27;bar&#x27;}, &#x27;dive_bar&#x27;: {&#x27;amenity&#x27;: &#x27;bar&#x27;}, &#x27;drive_thru_bar&#x27;: {&#x27;amenity&#x27;: &#x27;bar&#x27;, &#x27;drive_through&#x27;: &#x27;yes&#x27;}, &#x27;gay_bar&#x27;: {&#x27;amenity&#x27;: &#x27;bar&#x27;, &#x27;lgbtq&#x27;: &#x27;primary&#x27;}, &#x27;hookah_bar&#x27;: {&#x27;amenity&#x27;: &#x27;bar&#x27;}, &#x27;hotel_bar&#x27;: {&#x27;amenity&#x27;: &#x27;bar&#x27;}, &#x27;irish_pub&#x27;: {&#x27;amenity&#x27;: &#x27;bar&#x27;, &#x27;cuisine&#x27;: &#x27;irish&#x27;}, &#x27;milk_bar&#x27;: {&#x27;amenity&#x27;: &#x27;fast_food&#x27;}, &#x27;pub&#x27;: {&#x27;amenity&#x27;: &#x27;pub&#x27;}, &#x27;sake_bar&#x27;: {&#x27;amenity&#x27;: &#x27;bar&#x27;}, &#x27;speakeasy&#x27;: {&#x27;amenity&#x27;: &#x27;bar&#x27;}, &#x27;sports_bar&#x27;: {&#x27;amenity&#x27;: &#x27;bar&#x27;}, &#x27;tiki_bar&#x27;: {&#x27;amenity&#x27;: &#x27;bar&#x27;}, &#x27;vermouth_bar&#x27;: {&#x27;amenity&#x27;: &#x27;bar&#x27;}, &#x27;whiskey_bar&#x27;: {&#x27;amenity&#x27;: &#x27;bar&#x27;}, &#x27;wine_bar&#x27;: {&#x27;amenity&#x27;: &#x27;bar&#x27;}, &#x27;piano_bar&#x27;: {&#x27;amenity&#x27;: &#x27;bar&#x27;, &#x27;live_music&#x27;: &#x27;yes&#x27;}, &#x27;cafe&#x27;: {&#x27;amenity&#x27;: &#x27;cafe&#x27;}, &#x27;coffee_roastery&#x27;: {&#x27;shop&#x27;: &#x27;coffee&#x27;}, &#x27;tea_room&#x27;: {&#x27;amenity&#x27;: &#x27;cafe&#x27;}, &#x27;coffee_shop&#x27;: {&#x27;amenity&#x27;: &#x27;cafe&#x27;, &#x27;cuisine&#x27;: &#x27;coffee_shop&#x27;}, &#x27;accommodation&#x27;: {&#x27;tourism&#x27;: &#x27;yes&#x27;}, &#x27;bed_and_breakfast&#x27;: {&#x27;tourism&#x27;: &#x27;guest_house&#x27;, &#x27;guest_house&#x27;: &#x27;bed_and_breakfast&#x27;}, &#x27;cabin&#x27;: {&#x27;tourism&#x27;: &#x27;chalet&#x27;}, &#x27;campground&#x27;: {&#x27;tourism&#x27;: &#x27;camp_site&#x27;}, &#x27;cottage&#x27;: {&#x27;tourism&#x27;: &#x27;chalet&#x27;}, &#x27;guest_house&#x27;: {&#x27;tourism&#x27;: &#x27;guest_house&#x27;}, &#x27;hostel&#x27;: {&#x27;tourism&#x27;: &#x27;hostel&#x27;}, &#x27;hotel&#x27;: {&#x27;tourism&#x27;: &#x27;hotel&#x27;}, &#x27;motel&#x27;: {&#x27;tourism&#x27;: &#x27;motel&#x27;}, &#x27;resort&#x27;: {&#x27;leisure&#x27;: &#x27;resort&#x27;}, &#x27;beach_resort&#x27;: {&#x27;leisure&#x27;: &#x27;beach_resort&#x27;}, &#x27;rv_park&#x27;: {&#x27;tourism&#x27;: &#x27;caravan_site&#x27;}, &#x27;service_apartments&#x27;: {&#x27;tourism&#x27;: &#x27;apartment&#x27;}, &#x27;automotive_dealer&#x27;: {&#x27;shop&#x27;: &#x27;car&#x27;}, &#x27;car_dealer&#x27;: {&#x27;shop&#x27;: &#x27;car&#x27;}, &#x27;motorcycle_dealer&#x27;: {&#x27;shop&#x27;: &#x27;motorcycle&#x27;}, &#x27;used_car_dealer&#x27;: {&#x27;shop&#x27;: &#x27;car&#x27;, &#x27;second_hand&#x27;: &#x27;only&#x27;}, &#x27;automotive_services_and_repair&#x27;: {&#x27;amenity&#x27;: &#x27;car_repair&#x27;}, &#x27;auto_body_shop&#x27;: {&#x27;shop&#x27;: &#x27;car_repair&#x27;, &#x27;car_repair&#x27;: &#x27;bodywork&#x27;}, &#x27;auto_customization&#x27;: {&#x27;shop&#x27;: &#x27;car_repair&#x27;, &#x27;car_repair&#x27;: &#x27;customization&#x27;}, &#x27;auto_detailing&#x27;: {&#x27;shop&#x27;: &#x27;car_repair&#x27;, &#x27;car_repair&#x27;: &#x27;detailing&#x27;}, &#x27;auto_electrical_repair&#x27;: {&#x27;shop&#x27;: &#x27;car_repair&#x27;, &#x27;car_repair&#x27;: &#x27;electrical&#x27;}, &#x27;auto_glass_service&#x27;: {&#x27;shop&#x27;: &#x27;car_repair&#x27;, &#x27;car_repair&#x27;: &#x27;glass&#x27;}, &#x27;car_window_tinting&#x27;: {&#x27;shop&#x27;: &#x27;car_repair&#x27;, &#x27;car_repair&#x27;: &#x27;tinting&#x27;}, &#x27;auto_restoration_services&#x27;: {&#x27;shop&#x27;: &#x27;car_repair&#x27;, &#x27;car_repair&#x27;: &#x27;restoration&#x27;}, &#x27;auto_security&#x27;: {&#x27;shop&#x27;: &#x27;car_repair&#x27;, &#x27;car_repair&#x27;: &#x27;security&#x27;}, &#x27;automotive_consultant&#x27;: {&#x27;office&#x27;: &#x27;consulting&#x27;, &#x27;consulting&#x27;: &#x27;automotive&#x27;}, &#x27;automotive_storage_facility&#x27;: {&#x27;amenity&#x27;: &#x27;parking&#x27;}, &#x27;car_wash&#x27;: {&#x27;amenity&#x27;: &#x27;car_wash&#x27;}, &#x27;motorcycle_repair&#x27;: {&#x27;shop&#x27;: &#x27;motorcycle_repair&#x27;}, &#x27;tire_dealer_and_repair&#x27;: {&#x27;shop&#x27;: &#x27;tyres&#x27;}, &#x27;automotive_parts_and_accessories&#x27;: {&#x27;shop&#x27;: &#x27;car_parts&#x27;}, &#x27;gas_station&#x27;: {&#x27;amenity&#x27;: &#x27;fuel&#x27;}, &#x27;truck_gas_station&#x27;: {&#x27;amenity&#x27;: &#x27;fuel&#x27;, &#x27;hgv&#x27;: &#x27;yes&#x27;}, &#x27;ev_charging_station&#x27;: {&#x27;amenity&#x27;: &#x27;charging_station&#x27;}, &#x27;automotive_repair&#x27;: {&#x27;shop&#x27;: &#x27;car_repair&#x27;}, &#x27;auto_company&#x27;: {&#x27;shop&#x27;: &#x27;car&#x27;}, &#x27;betting_center&#x27;: {&#x27;shop&#x27;: &#x27;bookmaker&#x27;}, &#x27;bookmakers&#x27;: {&#x27;shop&#x27;: &#x27;bookmaker&#x27;}, &#x27;carousel&#x27;: {&#x27;attraction&#x27;: &#x27;carousel&#x27;}, &#x27;casino&#x27;: {&#x27;amenity&#x27;: &#x27;casino&#x27;}, &#x27;circus&#x27;: {&#x27;amenity&#x27;: &#x27;theatre&#x27;, &#x27;theatre:genre&#x27;: &#x27;circus&#x27;}, &#x27;comedy_club&#x27;: {&#x27;amenity&#x27;: &#x27;theatre&#x27;, &#x27;theatre:genre&#x27;: &#x27;comedy&#x27;}, &#x27;topic_concert_venue&#x27;: {&#x27;amenity&#x27;: &#x27;music_venue&#x27;}, &#x27;dance_club&#x27;: {&#x27;amenity&#x27;: &#x27;nightclub&#x27;}, &#x27;escape_rooms&#x27;: {&#x27;leisure&#x27;: &#x27;escape_game&#x27;}, &#x27;internet_cafe&#x27;: {&#x27;amenity&#x27;: &#x27;internet_cafe&#x27;}, &#x27;paintball&#x27;: {&#x27;leisure&#x27;: &#x27;pitch&#x27;, &#x27;sport&#x27;: &#x27;paintball&#x27;}, &#x27;planetarium&#x27;: {&#x27;amenity&#x27;: &#x27;planetarium&#x27;}, &#x27;stadium_arena&#x27;: {&#x27;leisure&#x27;: &#x27;stadium&#x27;}, &#x27;baseball_stadium&#x27;: {&#x27;leisure&#x27;: &#x27;pitch&#x27;, &#x27;sport&#x27;: &#x27;baseball&#x27;}, &#x27;basketball_stadium&#x27;: {&#x27;leisure&#x27;: &#x27;pitch&#x27;, &#x27;sport&#x27;: &#x27;basketball&#x27;}, &#x27;cricket_ground&#x27;: {&#x27;leisure&#x27;: &#x27;pitch&#x27;, &#x27;sport&#x27;: &#x27;cricket&#x27;}, &#x27;football_stadium&#x27;: {&#x27;leisure&#x27;: &#x27;pitch&#x27;, &#x27;sport&#x27;: &#x27;american_football&#x27;}, &#x27;hockey_arena&#x27;: {&#x27;leisure&#x27;: &#x27;stadium&#x27;, &#x27;sport&#x27;: &#x27;hockey&#x27;}, &#x27;rugby_stadium&#x27;: {&#x27;leisure&#x27;: &#x27;stadium&#x27;, &#x27;sport&#x27;: &#x27;rugby&#x27;}, &#x27;soccer_stadium&#x27;: {&#x27;leisure&#x27;: &#x27;pitch&#x27;, &#x27;sport&#x27;: &#x27;soccer&#x27;}, &#x27;tennis_stadium&#x27;: {&#x27;leisure&#x27;: &#x27;pitch&#x27;, &#x27;sport&#x27;: &#x27;tennis&#x27;}, &#x27;track_stadium&#x27;: {&#x27;leisure&#x27;: &#x27;stadium&#x27;, &#x27;sport&#x27;: &#x27;track&#x27;}, &#x27;theatre&#x27;: {&#x27;amenity&#x27;: &#x27;theatre&#x27;}, &#x27;water_park&#x27;: {&#x27;leisure&#x27;: &#x27;water_park&#x27;}, &#x27;cinema&#x27;: {&#x27;amenity&#x27;: &#x27;cinema&#x27;}, &#x27;drive_in_theatre&#x27;: {&#x27;amenity&#x27;: &#x27;cinema&#x27;, &#x27;drive_in&#x27;: &#x27;yes&#x27;}, &#x27;outdoor_movies&#x27;: {&#x27;amenity&#x27;: &#x27;cinema&#x27;, &#x27;outdoor&#x27;: &#x27;yes&#x27;}, &#x27;farm&#x27;: {&#x27;shop&#x27;: &#x27;farm&#x27;}, &#x27;attraction_farm&#x27;: {&#x27;shop&#x27;: &#x27;farm&#x27;}, &#x27;psychic&#x27;: {&#x27;shop&#x27;: &#x27;psychic&#x27;}, &#x27;amusement_park&#x27;: {&#x27;tourism&#x27;: &#x27;theme_park&#x27;}, &#x27;aquarium&#x27;: {&#x27;tourism&#x27;: &#x27;aquarium&#x27;}, &#x27;art_gallery&#x27;: {&#x27;tourism&#x27;: &#x27;gallery&#x27;}, &#x27;beach&#x27;: {&#x27;natural&#x27;: &#x27;beach&#x27;}, &#x27;botanical_garden&#x27;: {&#x27;leisure&#x27;: &#x27;garden&#x27;, &#x27;garden:type&#x27;: &#x27;botanical&#x27;}, &#x27;canyon&#x27;: {&#x27;natural&#x27;: &#x27;valley&#x27;}, &#x27;castle&#x27;: {&#x27;historic&#x27;: &#x27;castle&#x27;}, &#x27;cave&#x27;: {&#x27;natural&#x27;: &#x27;cave_entrance&#x27;}, &#x27;fort&#x27;: {&#x27;historic&#x27;: &#x27;fort&#x27;}, &#x27;fountain&#x27;: {&#x27;amenity&#x27;: &#x27;fountain&#x27;}, &#x27;lake&#x27;: {&#x27;natural&#x27;: &#x27;water&#x27;, &#x27;water&#x27;: &#x27;lake&#x27;}, &#x27;landmark_and_historical_building&#x27;: {&#x27;building&#x27;: &#x27;yes&#x27;}, &#x27;lighthouse&#x27;: {&#x27;man_made&#x27;: &#x27;lighthouse&#x27;}, &#x27;lookout&#x27;: {&#x27;tourism&#x27;: &#x27;viewpoint&#x27;}, &#x27;marina&#x27;: {&#x27;leisure&#x27;: &#x27;marina&#x27;}, &#x27;monument&#x27;: {&#x27;historic&#x27;: &#x27;monument&#x27;}, &#x27;observatory&#x27;: {&#x27;man_made&#x27;: &#x27;observatory&#x27;}, &#x27;palace&#x27;: {&#x27;historic&#x27;: &#x27;castle&#x27;, &#x27;castle_type&#x27;: &#x27;palace&#x27;}, &#x27;plaza&#x27;: {&#x27;place&#x27;: &#x27;square&#x27;}, &#x27;ruin&#x27;: {&#x27;historic&#x27;: &#x27;ruins&#x27;}, &#x27;sculpture_statue&#x27;: {&#x27;historic&#x27;: &#x27;memorial&#x27;, &#x27;memorial&#x27;: &#x27;statue&#x27;}, &#x27;trail&#x27;: {&#x27;highway&#x27;: &#x27;path&#x27;}, &#x27;hiking_trail&#x27;: {&#x27;highway&#x27;: &#x27;path&#x27;, &#x27;sac_scale&#x27;: &#x27;hiking&#x27;}, &#x27;mountain_bike_trails&#x27;: {&#x27;highway&#x27;: &#x27;path&#x27;, &#x27;bicycle&#x27;: &#x27;yes&#x27;}, &#x27;waterfall&#x27;: {&#x27;waterway&#x27;: &#x27;waterfall&#x27;}, &#x27;zoo&#x27;: {&#x27;tourism&#x27;: &#x27;zoo&#x27;}, &#x27;petting_zoo&#x27;: {&#x27;tourism&#x27;: &#x27;zoo&#x27;, &#x27;zoo&#x27;: &#x27;petting_zoo&#x27;}, &#x27;museum&#x27;: {&#x27;tourism&#x27;: &#x27;museum&#x27;}, &#x27;art_museum&#x27;: {&#x27;tourism&#x27;: &#x27;gallery&#x27;}, &#x27;asian_art_museum&#x27;: {&#x27;tourism&#x27;: &#x27;gallery&#x27;}, &#x27;contemporary_art_museum&#x27;: {&#x27;tourism&#x27;: &#x27;gallery&#x27;}, &quot;children&#x27;s_museum&quot;: {&#x27;tourism&#x27;: &#x27;museum&#x27;}, &#x27;costume_museum&#x27;: {&#x27;tourism&#x27;: &#x27;museum&#x27;}, &#x27;decorative_arts_museum&#x27;: {&#x27;tourism&#x27;: &#x27;gallery&#x27;}, &#x27;design_museum&#x27;: {&#x27;tourism&#x27;: &#x27;museum&#x27;}, &#x27;modern_art_museum&#x27;: {&#x27;tourism&#x27;: &#x27;gallery&#x27;}, &#x27;photography_museum&#x27;: {&#x27;tourism&#x27;: &#x27;gallery&#x27;}, &#x27;history_museum&#x27;: {&#x27;tourism&#x27;: &#x27;museum&#x27;}, &#x27;community_museum&#x27;: {&#x27;tourism&#x27;: &#x27;museum&#x27;}, &#x27;military_museum&#x27;: {&#x27;tourism&#x27;: &#x27;museum&#x27;}, &#x27;national_museum&#x27;: {&#x27;tourism&#x27;: &#x27;museum&#x27;}, &#x27;science_museum&#x27;: {&#x27;tourism&#x27;: &#x27;museum&#x27;}, &#x27;state_museum&#x27;: {&#x27;tourism&#x27;: &#x27;museum&#x27;}, &#x27;aviation_museum&#x27;: {&#x27;tourism&#x27;: &#x27;museum&#x27;}, &#x27;sports_museum&#x27;: {&#x27;tourism&#x27;: &#x27;museum&#x27;}, &#x27;park&#x27;: {&#x27;leisure&#x27;: &#x27;park&#x27;}, &#x27;dog_park&#x27;: {&#x27;leisure&#x27;: &#x27;dog_park&#x27;}, &#x27;memorial_park&#x27;: {&#x27;leisure&#x27;: &#x27;park&#x27;}, &#x27;national_park&#x27;: {&#x27;boundary&#x27;: &#x27;protected_area&#x27;}, &#x27;state_park&#x27;: {&#x27;boundary&#x27;: &#x27;protected_area&#x27;}, &#x27;american_football_field&#x27;: {&#x27;leisure&#x27;: &#x27;pitch&#x27;, &#x27;sport&#x27;: &#x27;american_football&#x27;}, &#x27;archery_range&#x27;: {&#x27;leisure&#x27;: &#x27;pitch&#x27;, &#x27;sport&#x27;: &#x27;archery&#x27;}, &#x27;badminton_court&#x27;: {&#x27;leisure&#x27;: &#x27;pitch&#x27;, &#x27;sport&#x27;: &#x27;badminton&#x27;}, &#x27;baseball_field&#x27;: {&#x27;leisure&#x27;: &#x27;pitch&#x27;, &#x27;sport&#x27;: &#x27;baseball&#x27;}, &#x27;basketball_court&#x27;: {&#x27;leisure&#x27;: &#x27;pitch&#x27;, &#x27;sport&#x27;: &#x27;basketball&#x27;}, &#x27;beach_volleyball_court&#x27;: {&#x27;leisure&#x27;: &#x27;pitch&#x27;, &#x27;sport&#x27;: &#x27;beachvolleyball&#x27;}, &#x27;bocce_ball_court&#x27;: {&#x27;leisure&#x27;: &#x27;pitch&#x27;, &#x27;sport&#x27;: &#x27;boules&#x27;}, &#x27;bowling_alley&#x27;: {&#x27;leisure&#x27;: &#x27;bowling_alley&#x27;}, &#x27;bubble_soccer_field&#x27;: {&#x27;leisure&#x27;: &#x27;pitch&#x27;, &#x27;sport&#x27;: &#x27;soccer&#x27;}, &#x27;disc_golf_course&#x27;: {&#x27;leisure&#x27;: &#x27;disc_golf_course&#x27;}, &#x27;futsal_field&#x27;: {&#x27;leisure&#x27;: &#x27;pitch&#x27;, &#x27;sport&#x27;: &#x27;futsal&#x27;}, &#x27;golf_course&#x27;: {&#x27;leisure&#x27;: &#x27;golf_course&#x27;}, &#x27;driving_range&#x27;: {&#x27;golf&#x27;: &#x27;driving_range&#x27;}, &#x27;gym&#x27;: {&#x27;leisure&#x27;: &#x27;fitness_centre&#x27;}, &#x27;handball_court&#x27;: {&#x27;leisure&#x27;: &#x27;pitch&#x27;, &#x27;sport&#x27;: &#x27;handball&#x27;}, &#x27;hockey_field&#x27;: {&#x27;leisure&#x27;: &#x27;pitch&#x27;, &#x27;sport&#x27;: &#x27;field_hockey&#x27;}, &#x27;horse_riding&#x27;: {&#x27;leisure&#x27;: &#x27;horse_riding&#x27;}, &#x27;miniature_golf_course&#x27;: {&#x27;leisure&#x27;: &#x27;miniature_golf&#x27;}, &#x27;playground&#x27;: {&#x27;leisure&#x27;: &#x27;playground&#x27;}, &#x27;racquetball_court&#x27;: {&#x27;leisure&#x27;: &#x27;pitch&#x27;, &#x27;sport&#x27;: &#x27;racquetball&#x27;}, &#x27;rock_climbing_gym&#x27;: {&#x27;leisure&#x27;: &#x27;fitness_centre&#x27;, &#x27;sport&#x27;: &#x27;rock_climbing&#x27;, &#x27;indoor&#x27;: &#x27;yes&#x27;}, &#x27;rugby_pitch&#x27;: {&#x27;leisure&#x27;: &#x27;pitch&#x27;, &#x27;sport&#x27;: &#x27;rugby&#x27;}, &#x27;soccer_field&#x27;: {&#x27;leisure&#x27;: &#x27;pitch&#x27;, &#x27;sport&#x27;: &#x27;soccer&#x27;}, &#x27;squash_court&#x27;: {&#x27;leisure&#x27;: &#x27;pitch&#x27;, &#x27;sport&#x27;: &#x27;squash&#x27;}, &#x27;swimming_pool&#x27;: {&#x27;leisure&#x27;: &#x27;swimming_pool&#x27;}, &#x27;tennis_court&#x27;: {&#x27;leisure&#x27;: &#x27;pitch&#x27;, &#x27;sport&#x27;: &#x27;tennis&#x27;}, &#x27;trampoline_park&#x27;: {&#x27;leisure&#x27;: &#x27;trampoline_park&#x27;}, &#x27;volleyball_court&#x27;: {&#x27;leisure&#x27;: &#x27;pitch&#x27;, &#x27;sport&#x27;: &#x27;volleyball&#x27;}, &#x27;dance_school&#x27;: {&#x27;leisure&#x27;: &#x27;dance&#x27;, &#x27;dance:teaching&#x27;: &#x27;yes&#x27;}, &#x27;ski_and_snowboard_school&#x27;: {&#x27;amenity&#x27;: &#x27;school&#x27;}, &#x27;surfing_school&#x27;: {&#x27;amenity&#x27;: &#x27;school&#x27;}, &#x27;yoga_studio&#x27;: {&#x27;leisure&#x27;: &#x27;fitness_centre&#x27;, &#x27;sport&#x27;: &#x27;yoga&#x27;}, &#x27;fencing_club&#x27;: {&#x27;leisure&#x27;: &#x27;sports_centre&#x27;, &#x27;sport&#x27;: &#x27;fencing&#x27;}, &#x27;gymnastics_club&#x27;: {&#x27;leisure&#x27;: &#x27;sports_centre&#x27;, &#x27;sport&#x27;: &#x27;gymnastics&#x27;}, &#x27;soccer_club&#x27;: {&#x27;leisure&#x27;: &#x27;sports_centre&#x27;, &#x27;sport&#x27;: &#x27;soccer&#x27;}, &#x27;table_tennis_club&#x27;: {&#x27;leisure&#x27;: &#x27;sports_centre&#x27;, &#x27;sport&#x27;: &#x27;table_tennis&#x27;}, &#x27;volleyball_club&#x27;: {&#x27;leisure&#x27;: &#x27;sports_centre&#x27;, &#x27;sport&#x27;: &#x27;volleyball&#x27;}, &#x27;golf_club&#x27;: {&#x27;leisure&#x27;: &#x27;golf_course&#x27;}, &#x27;indoor_golf_center&#x27;: {&#x27;leisure&#x27;: &#x27;golf_course&#x27;, &#x27;golf:course&#x27;: &#x27;driving_range&#x27;, &#x27;indoor&#x27;: &#x27;yes&#x27;}, &#x27;martial_arts_club&#x27;: {&#x27;sport&#x27;: &#x27;martial_arts&#x27;}, &#x27;karate_club&#x27;: {&#x27;leisure&#x27;: &#x27;sports_centre&#x27;, &#x27;sport&#x27;: &#x27;karate&#x27;}, &#x27;taekwondo_club&#x27;: {&#x27;leisure&#x27;: &#x27;sports_centre&#x27;, &#x27;sport&#x27;: &#x27;taekwondo&#x27;}, &#x27;bike_rentals&#x27;: {&#x27;amenity&#x27;: &#x27;bicycle_rental&#x27;}, &#x27;beauty_and_spa&#x27;: {&#x27;amenity&#x27;: &#x27;spa&#x27;}, &#x27;beauty_salon&#x27;: {&#x27;shop&#x27;: &#x27;beauty&#x27;}, &#x27;barber&#x27;: {&#x27;shop&#x27;: &#x27;hairdresser&#x27;}, &#x27;health_spa&#x27;: {&#x27;amenity&#x27;: &#x27;spa&#x27;}, &#x27;massage&#x27;: {&#x27;shop&#x27;: &#x27;massage&#x27;}, &#x27;tattoo_and_piercing&#x27;: {&#x27;shop&#x27;: &#x27;tattoo&#x27;, &#x27;piercing&#x27;: &#x27;yes&#x27;}, &#x27;piercing&#x27;: {&#x27;shop&#x27;: &#x27;tattoo&#x27;, &#x27;piercing&#x27;: &#x27;yes&#x27;}, &#x27;tattoo&#x27;: {&#x27;shop&#x27;: &#x27;tattoo&#x27;}, &#x27;spas&#x27;: {&#x27;amenity&#x27;: &#x27;spa&#x27;}, &#x27;medical_spa&#x27;: {&#x27;amenity&#x27;: &#x27;spa&#x27;}, &#x27;day_spa&#x27;: {&#x27;amenity&#x27;: &#x27;spa&#x27;}, &#x27;college_university&#x27;: {&#x27;amenity&#x27;: &#x27;university&#x27;, &#x27;isced:level&#x27;: &#x27;5&#x27;}, &#x27;school&#x27;: {&#x27;amenity&#x27;: &#x27;school&#x27;}, &#x27;charter_school&#x27;: {&#x27;amenity&#x27;: &#x27;school&#x27;}, &#x27;elementary_school&#x27;: {&#x27;amenity&#x27;: &#x27;school&#x27;, &#x27;isced:level&#x27;: &#x27;1&#x27;}, &#x27;high_school&#x27;: {&#x27;amenity&#x27;: &#x27;school&#x27;, &#x27;isced:level&#x27;: &#x27;3&#x27;}, &#x27;middle_school&#x27;: {&#x27;amenity&#x27;: &#x27;school&#x27;, &#x27;isced:level&#x27;: &#x27;2&#x27;}, &#x27;montessori_school&#x27;: {&#x27;amenity&#x27;: &#x27;school&#x27;}, &#x27;preschool&#x27;: {&#x27;amenity&#x27;: &#x27;school&#x27;, &#x27;isced:level&#x27;: &#x27;0&#x27;}, &#x27;private_school&#x27;: {&#x27;amenity&#x27;: &#x27;school&#x27;}, &#x27;public_school&#x27;: {&#x27;amenity&#x27;: &#x27;school&#x27;}, &#x27;religious_school&#x27;: {&#x27;amenity&#x27;: &#x27;school&#x27;}, &#x27;waldorf_school&#x27;: {&#x27;amenity&#x27;: &#x27;school&#x27;}, &#x27;specialty_school&#x27;: {&#x27;amenity&#x27;: &#x27;school&#x27;}, &#x27;art_school&#x27;: {&#x27;amenity&#x27;: &#x27;school&#x27;, &#x27;school&#x27;: &#x27;art&#x27;}, &#x27;bartending_school&#x27;: {&#x27;amenity&#x27;: &#x27;school&#x27;, &#x27;school&#x27;: &#x27;bartending&#x27;}, &#x27;circus_school&#x27;: {&#x27;amenity&#x27;: &#x27;school&#x27;, &#x27;school&#x27;: &#x27;circus&#x27;}, &#x27;cooking_school&#x27;: {&#x27;amenity&#x27;: &#x27;school&#x27;, &#x27;school&#x27;: &#x27;cooking&#x27;}, &#x27;cosmetology_school&#x27;: {&#x27;amenity&#x27;: &#x27;school&#x27;, &#x27;school&#x27;: &#x27;cosmetology&#x27;}, &#x27;drama_school&#x27;: {&#x27;amenity&#x27;: &#x27;school&#x27;, &#x27;school&#x27;: &#x27;drama&#x27;}, &#x27;driving_school&#x27;: {&#x27;amenity&#x27;: &#x27;driving_school&#x27;}, &#x27;dui_school&#x27;: {&#x27;amenity&#x27;: &#x27;school&#x27;}, &#x27;flight_school&#x27;: {&#x27;amenity&#x27;: &#x27;school&#x27;}, &#x27;language_school&#x27;: {&#x27;amenity&#x27;: &#x27;language_school&#x27;}, &#x27;massage_school&#x27;: {&#x27;amenity&#x27;: &#x27;school&#x27;}, &#x27;medical_school&#x27;: {&#x27;amenity&#x27;: &#x27;school&#x27;}, &#x27;music_school&#x27;: {&#x27;amenity&#x27;: &#x27;music_school&#x27;}, &#x27;nursing_school&#x27;: {&#x27;amenity&#x27;: &#x27;school&#x27;}, &#x27;sports_school&#x27;: {&#x27;amenity&#x27;: &#x27;school&#x27;}, &#x27;traffic_school&#x27;: {&#x27;amenity&#x27;: &#x27;school&#x27;}, &#x27;vocational_and_technical_school&#x27;: {&#x27;amenity&#x27;: &#x27;school&#x27;}, &#x27;financial_service&#x27;: {&#x27;office&#x27;: &#x27;financial&#x27;}, &#x27;accountant&#x27;: {&#x27;office&#x27;: &#x27;accountant&#x27;}, &#x27;atms&#x27;: {&#x27;amenity&#x27;: &#x27;atm&#x27;}, &#x27;bank_credit_union&#x27;: {&#x27;amenity&#x27;: &#x27;bank&#x27;}, &#x27;banks&#x27;: {&#x27;amenity&#x27;: &#x27;bank&#x27;}, &#x27;credit_union&#x27;: {&#x27;amenity&#x27;: &#x27;bank&#x27;}, &#x27;business_brokers&#x27;: {&#x27;office&#x27;: &#x27;financial_advisor&#x27;}, &#x27;insurance_agency&#x27;: {&#x27;office&#x27;: &#x27;insurance&#x27;}, &#x27;auto_insurance&#x27;: {&#x27;office&#x27;: &#x27;insurance&#x27;, &#x27;insurance&#x27;: &#x27;car&#x27;}, &#x27;farm_insurance&#x27;: {&#x27;office&#x27;: &#x27;insurance&#x27;, &#x27;insurance&#x27;: &#x27;farm&#x27;}, &#x27;home_and_rental_insurance&#x27;: {&#x27;office&#x27;: &#x27;insurance&#x27;, &#x27;insurance&#x27;: &#x27;home&#x27;}, &#x27;life_insurance&#x27;: {&#x27;office&#x27;: &#x27;insurance&#x27;, &#x27;insurance&#x27;: &#x27;life&#x27;}, &#x27;investing&#x27;: {&#x27;office&#x27;: &#x27;financial_advisor&#x27;}, &#x27;tax_services&#x27;: {&#x27;office&#x27;: &#x27;tax_advisor&#x27;}, &#x27;trusts&#x27;: {&#x27;office&#x27;: &#x27;accountant&#x27;}, &#x27;private_establishments_and_corporates&#x27;: {&#x27;office&#x27;: &#x27;company&#x27;}, &#x27;retail&#x27;: {&#x27;shop&#x27;: &#x27;yes&#x27;}, &#x27;bagel_shop&#x27;: {&#x27;amenity&#x27;: &#x27;cafe&#x27;, &#x27;cuisine&#x27;: &#x27;bagel&#x27;}, &#x27;bakery&#x27;: {&#x27;shop&#x27;: &#x27;bakery&#x27;}, &#x27;flatbread&#x27;: {&#x27;shop&#x27;: &#x27;bakery&#x27;}, &#x27;beer_wine_and_spirits&#x27;: {&#x27;shop&#x27;: &#x27;alcohol&#x27;}, &#x27;patisserie_cake_shop&#x27;: {&#x27;shop&#x27;: &#x27;pastry&#x27;}, &#x27;cupcake_shop&#x27;: {&#x27;shop&#x27;: &#x27;pastry&#x27;}, &#x27;custom_cakes_shop&#x27;: {&#x27;shop&#x27;: &#x27;pastry&#x27;}, &#x27;coffee_and_tea_supplies&#x27;: {&#x27;shop&#x27;: &#x27;coffee&#x27;}, &#x27;health_food_store&#x27;: {&#x27;shop&#x27;: &#x27;herbalist&#x27;}, &#x27;ice_cream_and_frozen_yoghurt&#x27;: {&#x27;amenity&#x27;: &#x27;ice_cream&#x27;}, &#x27;gelato&#x27;: {&#x27;amenity&#x27;: &#x27;ice_cream&#x27;}, &#x27;ice_cream_shop&#x27;: {&#x27;amenity&#x27;: &#x27;ice_cream&#x27;}, &#x27;frozen_yoghurt_shop&#x27;: {&#x27;amenity&#x27;: &#x27;ice_cream&#x27;}, &#x27;liquor_store&#x27;: {&#x27;shop&#x27;: &#x27;alcohol&#x27;}, &#x27;mulled_wine&#x27;: {&#x27;shop&#x27;: &#x27;wine&#x27;}, &#x27;sandwich_shop&#x27;: {&#x27;amenity&#x27;: &#x27;fast_food&#x27;, &#x27;cuisine&#x27;: &#x27;sandwich&#x27;}, &#x27;delicatessen&#x27;: {&#x27;shop&#x27;: &#x27;deli&#x27;}, &#x27;winery&#x27;: {&#x27;craft&#x27;: &#x27;winery&#x27;}, &#x27;wine_tasting_room&#x27;: {&#x27;craft&#x27;: &#x27;winery&#x27;}, &#x27;auto_parts_and_supply_store&#x27;: {&#x27;shop&#x27;: &#x27;car_parts&#x27;}, &#x27;beverage_store&#x27;: {&#x27;shop&#x27;: &#x27;alcohol&#x27;}, &#x27;butcher_shop&#x27;: {&#x27;shop&#x27;: &#x27;butcher&#x27;}, &#x27;candy_store&#x27;: {&#x27;shop&#x27;: &#x27;confectionery&#x27;}, &#x27;japanese_confectionery_shop&#x27;: {&#x27;shop&#x27;: &#x27;confectionery&#x27;}, &#x27;carpet_store&#x27;: {&#x27;shop&#x27;: &#x27;carpet&#x27;}, &#x27;cheese_shop&#x27;: {&#x27;shop&#x27;: &#x27;cheese&#x27;}, &#x27;chocolatier&#x27;: {&#x27;shop&#x27;: &#x27;chocolate&#x27;}, &#x27;distillery&#x27;: {&#x27;craft&#x27;: &#x27;distillery&#x27;}, &#x27;flooring_store&#x27;: {&#x27;shop&#x27;: &#x27;flooring&#x27;}, &#x27;meat_shop&#x27;: {&#x27;shop&#x27;: &#x27;butcher&#x27;}, &#x27;pharmacy&#x27;: {&#x27;amenity&#x27;: &#x27;pharmacy&#x27;}, &#x27;water_store&#x27;: {&#x27;shop&#x27;: &#x27;water&#x27;}, &#x27;shopping&#x27;: {&#x27;shop&#x27;: &#x27;yes&#x27;}, &#x27;arts_and_crafts&#x27;: {&#x27;shop&#x27;: &#x27;craft&#x27;}, &#x27;art_supply_store&#x27;: {&#x27;shop&#x27;: &#x27;craft&#x27;}, &#x27;costume_store&#x27;: {&#x27;shop&#x27;: &#x27;costume&#x27;}, &#x27;craft_shop&#x27;: {&#x27;shop&#x27;: &#x27;craft&#x27;}, &#x27;embroidery_and_crochet&#x27;: {&#x27;shop&#x27;: &#x27;sewing&#x27;}, &#x27;fabric_store&#x27;: {&#x27;shop&#x27;: &#x27;fabric&#x27;}, &#x27;framing_store&#x27;: {&#x27;shop&#x27;: &#x27;frame&#x27;}, &#x27;handicraft_shop&#x27;: {&#x27;shop&#x27;: &#x27;craft&#x27;}, &#x27;bookstore&#x27;: {&#x27;shop&#x27;: &#x27;books&#x27;}, &#x27;fashion&#x27;: {&#x27;shop&#x27;: &#x27;clothes&#x27;, &#x27;clothes&#x27;: &#x27;fashion&#x27;}, &#x27;clothing_store&#x27;: {&#x27;shop&#x27;: &#x27;clothes&#x27;}, &quot;children&#x27;s_clothing_store&quot;: {&#x27;shop&#x27;: &#x27;clothes&#x27;, &#x27;clothes&#x27;: &#x27;children&#x27;}, &#x27;denim_wear_store&#x27;: {&#x27;shop&#x27;: &#x27;clothes&#x27;, &#x27;clothes&#x27;: &#x27;denim&#x27;}, &quot;men&#x27;s_clothing_store&quot;: {&#x27;shop&#x27;: &#x27;clothes&#x27;, &#x27;clothes&#x27;: &#x27;men&#x27;}, &quot;women&#x27;s_clothing_store&quot;: {&#x27;shop&#x27;: &#x27;clothes&#x27;, &#x27;clothes&#x27;: &#x27;women&#x27;}, &#x27;fashion_accessories_store&#x27;: {&#x27;shop&#x27;: &#x27;fashion_accessories&#x27;}, &#x27;hat_shop&#x27;: {&#x27;shop&#x27;: &#x27;clothes&#x27;, &#x27;clothes&#x27;: &#x27;hats&#x27;}, &#x27;shoe_store&#x27;: {&#x27;shop&#x27;: &#x27;shoes&#x27;}, &#x27;orthopedic_shoe_store&#x27;: {&#x27;shop&#x27;: &#x27;shoes&#x27;, &#x27;shoes&#x27;: &#x27;orthopaedic&#x27;}, &#x27;eyewear_and_optician&#x27;: {&#x27;shop&#x27;: &#x27;optician&#x27;}, &#x27;flowers_and_gifts_shop&#x27;: {&#x27;shop&#x27;: &#x27;flowers&#x27;}, &#x27;florist&#x27;: {&#x27;shop&#x27;: &#x27;florist&#x27;}, &#x27;gift_shop&#x27;: {&#x27;shop&#x27;: &#x27;gift&#x27;}, &#x27;grocery_store&#x27;: {&#x27;shop&#x27;: &#x27;convenience&#x27;}, &#x27;specialty_grocery_store&#x27;: {&#x27;shop&#x27;: &#x27;supermarket&#x27;}, &#x27;asian_grocery_store&#x27;: {&#x27;shop&#x27;: &#x27;supermarket&#x27;, &#x27;cuisine&#x27;: &#x27;asian&#x27;}, &#x27;indian_grocery_store&#x27;: {&#x27;shop&#x27;: &#x27;supermarket&#x27;, &#x27;cuisine&#x27;: &#x27;indian&#x27;}, &#x27;japanese_grocery_store&#x27;: {&#x27;shop&#x27;: &#x27;supermarket&#x27;, &#x27;cuisine&#x27;: &#x27;japanese&#x27;}, &#x27;korean_grocery_store&#x27;: {&#x27;shop&#x27;: &#x27;supermarket&#x27;, &#x27;cuisine&#x27;: &#x27;korean&#x27;}, &#x27;kosher_grocery_store&#x27;: {&#x27;shop&#x27;: &#x27;supermarket&#x27;, &#x27;cuisine&#x27;: &#x27;kosher&#x27;}, &#x27;mexican_grocery_store&#x27;: {&#x27;shop&#x27;: &#x27;supermarket&#x27;, &#x27;cuisine&#x27;: &#x27;mexican&#x27;}, &#x27;organic_grocery_store&#x27;: {&#x27;shop&#x27;: &#x27;supermarket&#x27;, &#x27;organic&#x27;: &#x27;yes&#x27;}, &#x27;russian_grocery_store&#x27;: {&#x27;shop&#x27;: &#x27;supermarket&#x27;, &#x27;cuisine&#x27;: &#x27;russian&#x27;}, &#x27;home_and_garden&#x27;: {&#x27;shop&#x27;: &#x27;hardware&#x27;}, &#x27;hardware_store&#x27;: {&#x27;shop&#x27;: &#x27;hardware&#x27;}, &#x27;appliance_store&#x27;: {&#x27;shop&#x27;: &#x27;appliance&#x27;}, &#x27;candle_store&#x27;: {&#x27;shop&#x27;: &#x27;candles&#x27;}, &#x27;furniture_accessory_store&#x27;: {&#x27;shop&#x27;: &#x27;furniture&#x27;}, &#x27;furniture_store&#x27;: {&#x27;shop&#x27;: &#x27;furniture&#x27;}, &#x27;home_improvement_store&#x27;: {&#x27;shop&#x27;: &#x27;doityourself&#x27;}, &#x27;mattress_store&#x27;: {&#x27;shop&#x27;: &#x27;bed&#x27;}, &#x27;paint_store&#x27;: {&#x27;shop&#x27;: &#x27;paint&#x27;}, &#x27;medical_supply&#x27;: {&#x27;shop&#x27;: &#x27;medical_supply&#x27;}, &#x27;hearing_aids&#x27;: {&#x27;shop&#x27;: &#x27;hearing_aids&#x27;}, &#x27;pet_store&#x27;: {&#x27;shop&#x27;: &#x27;pet&#x27;}, &#x27;computer_store&#x27;: {&#x27;shop&#x27;: &#x27;computer&#x27;}, &#x27;convenience_store&#x27;: {&#x27;shop&#x27;: &#x27;convenience&#x27;}, &#x27;department_store&#x27;: {&#x27;shop&#x27;: &#x27;department_store&#x27;}, &#x27;discount_store&#x27;: {&#x27;shop&#x27;: &#x27;discount&#x27;}, &#x27;do_it_yourself_store&#x27;: {&#x27;shop&#x27;: &#x27;doityourself&#x27;}, &#x27;electronics&#x27;: {&#x27;shop&#x27;: &#x27;electronics&#x27;}, &#x27;jewelry_store&#x27;: {&#x27;shop&#x27;: &#x27;jewelry&#x27;}, &#x27;mobile_phone_store&#x27;: {&#x27;shop&#x27;: &#x27;mobile_phone&#x27;}, &#x27;shopping_center&#x27;: {&#x27;shop&#x27;: &#x27;mall&#x27;}, &#x27;supermarket&#x27;: {&#x27;shop&#x27;: &#x27;supermarket&#x27;}, &#x27;superstore&#x27;: {&#x27;shop&#x27;: &#x27;supermarket&#x27;}, &#x27;tobacco_shop&#x27;: {&#x27;shop&#x27;: &#x27;tobacco&#x27;}, &#x27;toy_store&#x27;: {&#x27;shop&#x27;: &#x27;toys&#x27;}, &#x27;used_bookstore&#x27;: {&#x27;shop&#x27;: &#x27;books&#x27;, &#x27;second_hand&#x27;: &#x27;only&#x27;}, &#x27;e_cigarette_store&#x27;: {&#x27;shop&#x27;: &#x27;tobacco&#x27;}, &#x27;watch_store&#x27;: {&#x27;shop&#x27;: &#x27;watches&#x27;}, &#x27;wholesale_store&#x27;: {&#x27;shop&#x27;: &#x27;wholesale&#x27;}, &#x27;bicycle_shop&#x27;: {&#x27;shop&#x27;: &#x27;bicycle&#x27;}, &#x27;swimwear_store&#x27;: {&#x27;shop&#x27;: &#x27;clothes&#x27;, &#x27;clothes&#x27;: &#x27;swimwear&#x27;}, &#x27;health_and_medical&#x27;: {&#x27;healthcare&#x27;: &#x27;yes&#x27;}, &#x27;counseling_and_mental_health&#x27;: {&#x27;healthcare&#x27;: &#x27;psychotherapist&#x27;}, &#x27;family_counselor&#x27;: {&#x27;healthcare&#x27;: &#x27;counselling&#x27;, &#x27;healthcare:counselling&#x27;: &#x27;family&#x27;}, &#x27;psychotherapist&#x27;: {&#x27;healthcare&#x27;: &#x27;psychotherapist&#x27;}, &#x27;dentist&#x27;: {&#x27;amenity&#x27;: &#x27;dentist&#x27;}, &#x27;doctor&#x27;: {&#x27;amenity&#x27;: &#x27;doctor&#x27;}, &#x27;audiologist&#x27;: {&#x27;healthcare&#x27;: &#x27;audiologist&#x27;}, &#x27;dermatologist&#x27;: {&#x27;healthcare:speciality&#x27;: &#x27;dermatology&#x27;}, &#x27;fertility&#x27;: {&#x27;amenity&#x27;: &#x27;clinic&#x27;, &#x27;healthcare&#x27;: &#x27;clinic&#x27;, &#x27;healthcare:speciality&#x27;: &#x27;fertility&#x27;}, &#x27;gastroenterologist&#x27;: {&#x27;healthcare:speciality&#x27;: &#x27;gastroenterology&#x27;}, &#x27;geneticist&#x27;: {&#x27;healthcare:speciality&#x27;: &#x27;genetics&#x27;}, &#x27;gerontologist&#x27;: {&#x27;healthcare:speciality&#x27;: &#x27;gerontology&#x27;}, &#x27;hepatologist&#x27;: {&#x27;healthcare:speciality&#x27;: &#x27;hepatology&#x27;}, &#x27;neurologist&#x27;: {&#x27;healthcare:speciality&#x27;: &#x27;neurology&#x27;}, &#x27;obstetrician_and_gynecologist&#x27;: {&#x27;healthcare:speciality&#x27;: &#x27;gynaecology&#x27;}, &#x27;oncologist&#x27;: {&#x27;healthcare:speciality&#x27;: &#x27;oncology&#x27;}, &#x27;podiatrist&#x27;: {&#x27;healthcare&#x27;: &#x27;podiatrist&#x27;}, &#x27;acupuncture&#x27;: {&#x27;healthcare&#x27;: &#x27;alternative&#x27;, &#x27;healthcare:speciality&#x27;: &#x27;acupuncture&#x27;}, &#x27;ayurveda&#x27;: {&#x27;healthcare&#x27;: &#x27;alternative&#x27;, &#x27;healthcare:speciality&#x27;: &#x27;ayurveda&#x27;}, &#x27;chiropractor&#x27;: {&#x27;healthcare&#x27;: &#x27;alternative&#x27;, &#x27;healthcare:specialty&#x27;: &#x27;chiropractic&#x27;}, &#x27;float_spa&#x27;: {&#x27;amenity&#x27;: &#x27;spa&#x27;}, &#x27;halotherapy&#x27;: {&#x27;healthcare:speciality&#x27;: &#x27;halotherapy&#x27;}, &#x27;hospice&#x27;: {&#x27;healthcare&#x27;: &#x27;hospice&#x27;}, &#x27;hospital&#x27;: {&#x27;amenity&#x27;: &#x27;hospital&#x27;}, &#x27;massage_therapy&#x27;: {&#x27;shop&#x27;: &#x27;massage&#x27;}, &#x27;midwife&#x27;: {&#x27;healthcare&#x27;: &#x27;midwife&#x27;}, &#x27;optometrist&#x27;: {&#x27;healthcare&#x27;: &#x27;optometrist&#x27;}, &#x27;physical_therapy&#x27;: {&#x27;healthcare&#x27;: &#x27;physiotherapist&#x27;}, &#x27;podiatry&#x27;: {&#x27;amenity&#x27;: &#x27;doctors&#x27;, &#x27;healthcare:speciality&#x27;: &#x27;podiatry&#x27;}, &#x27;sauna&#x27;: {&#x27;leisure&#x27;: &#x27;sauna&#x27;}, &#x27;speech_therapist&#x27;: {&#x27;healthcare&#x27;: &#x27;speech_therapist&#x27;}, &#x27;internal_medicine&#x27;: {&#x27;healthcare&#x27;: &#x27;doctor&#x27;, &#x27;healthcare:speciality&#x27;: &#x27;internal&#x27;}, &#x27;psychiatrist&#x27;: {&#x27;amenity&#x27;: &#x27;doctors&#x27;, &#x27;healthcare:speciality&#x27;: &#x27;psychiatry&#x27;}, &#x27;traditional_chinese_medicine&#x27;: {&#x27;healthcare&#x27;: &#x27;alternative&#x27;, &#x27;healthcare:speciality&#x27;: &#x27;traditional_chinese_medicine&#x27;}, &#x27;pet_groomer&#x27;: {&#x27;shop&#x27;: &#x27;pet_grooming&#x27;}, &#x27;animal_shelter&#x27;: {&#x27;amenity&#x27;: &#x27;animal_shelter&#x27;}, &#x27;veterinarian&#x27;: {&#x27;amenity&#x27;: &#x27;veterinary&#x27;}, &#x27;business_to_business&#x27;: {&#x27;office&#x27;: &#x27;yes&#x27;}, &#x27;research_institute&#x27;: {&#x27;amenity&#x27;: &#x27;research_institute&#x27;}, &#x27;coworking_space&#x27;: {&#x27;amenity&#x27;: &#x27;coworking_space&#x27;}, &#x27;information_technology_company&#x27;: {&#x27;office&#x27;: &#x27;it&#x27;}, &#x27;telecommunications_company&#x27;: {&#x27;office&#x27;: &#x27;telecommunication&#x27;}, &#x27;mining&#x27;: {&#x27;industrial&#x27;: &#x27;mine&#x27;}, &#x27;coal_and_coke&#x27;: {&#x27;industrial&#x27;: &#x27;mine&#x27;}, &#x27;oil_refiners&#x27;: {&#x27;industrial&#x27;: &#x27;refinery&#x27;}, &#x27;public_service_and_government&#x27;: {&#x27;office&#x27;: &#x27;yes&#x27;}, &#x27;non_governmental_association&#x27;: {&#x27;office&#x27;: &#x27;ngo&#x27;}, &#x27;public_and_government_association&#x27;: {&#x27;office&#x27;: &#x27;yes&#x27;}, &#x27;charity_organization&#x27;: {&#x27;office&#x27;: &#x27;charity&#x27;}, &#x27;food_banks&#x27;: {&#x27;amenity&#x27;: &#x27;social_facility&#x27;, &#x27;social_facility&#x27;: &#x27;food_bank&#x27;}, &#x27;homeless_shelter&#x27;: {&#x27;amenity&#x27;: &#x27;social_facility&#x27;, &#x27;social_facility&#x27;: &#x27;shelter&#x27;, &#x27;social_facility:for&#x27;: &#x27;homeless&#x27;}, &#x27;community_services_non_profits&#x27;: {&#x27;amenity&#x27;: &#x27;community_centre&#x27;}, &#x27;jail_and_prison&#x27;: {&#x27;amenity&#x27;: &#x27;prison&#x27;}, &#x27;juvenile_detention_center&#x27;: {&#x27;amenity&#x27;: &#x27;prison&#x27;}, &#x27;post_office&#x27;: {&#x27;amenity&#x27;: &#x27;post_office&#x27;}, &#x27;public_toilet&#x27;: {&#x27;amenity&#x27;: &#x27;toilets&#x27;, &#x27;access&#x27;: &#x27;yes&#x27;}, &#x27;community_center&#x27;: {&#x27;amenity&#x27;: &#x27;community_centre&#x27;}, &#x27;courthouse&#x27;: {&#x27;amenity&#x27;: &#x27;courthouse&#x27;}, &#x27;embassy&#x27;: {&#x27;office&#x27;: &#x27;diplomatic&#x27;, &#x27;diplomatic&#x27;: &#x27;embassy&#x27;}, &#x27;fire_department&#x27;: {&#x27;amenity&#x27;: &#x27;fire_station&#x27;}, &#x27;library&#x27;: {&#x27;amenity&#x27;: &#x27;library&#x27;}, &#x27;police_department&#x27;: {&#x27;amenity&#x27;: &#x27;police&#x27;}, &#x27;retirement_home&#x27;: {&#x27;amenity&#x27;: &#x27;social_facility&#x27;, &#x27;social_facility&#x27;: &#x27;assisted_living&#x27;}, &#x27;town_hall&#x27;: {&#x27;amenity&#x27;: &#x27;townhall&#x27;}, &#x27;religious_organization&#x27;: {&#x27;amenity&#x27;: &#x27;place_of_worship&#x27;}, &#x27;church_cathedral&#x27;: {&#x27;amenity&#x27;: &#x27;place_of_worship&#x27;, &#x27;religion&#x27;: &#x27;christian&#x27;}, &#x27;anglican_church&#x27;: {&#x27;amenity&#x27;: &#x27;place_of_worship&#x27;, &#x27;religion&#x27;: &#x27;christian&#x27;, &#x27;denomination&#x27;: &#x27;anglican&#x27;}, &#x27;baptist_church&#x27;: {&#x27;amenity&#x27;: &#x27;place_of_worship&#x27;, &#x27;religion&#x27;: &#x27;christian&#x27;, &#x27;denomination&#x27;: &#x27;baptist&#x27;}, &#x27;catholic_church&#x27;: {&#x27;amenity&#x27;: &#x27;place_of_worship&#x27;, &#x27;religion&#x27;: &#x27;christian&#x27;, &#x27;denomination&#x27;: &#x27;catholic&#x27;}, &#x27;episcopal_church&#x27;: {&#x27;amenity&#x27;: &#x27;place_of_worship&#x27;, &#x27;religion&#x27;: &#x27;christian&#x27;, &#x27;denomination&#x27;: &#x27;episcopal&#x27;}, &#x27;evangelical_church&#x27;: {&#x27;amenity&#x27;: &#x27;place_of_worship&#x27;, &#x27;religion&#x27;: &#x27;christian&#x27;, &#x27;denomination&#x27;: &#x27;evangelical&#x27;}, &#x27;pentecostal_church&#x27;: {&#x27;amenity&#x27;: &#x27;place_of_worship&#x27;, &#x27;religion&#x27;: &#x27;christian&#x27;, &#x27;denomination&#x27;: &#x27;pentecostal&#x27;}, &#x27;buddhist_temple&#x27;: {&#x27;amenity&#x27;: &#x27;place_of_worship&#x27;, &#x27;religion&#x27;: &#x27;buddhist&#x27;}, &#x27;hindu_temple&#x27;: {&#x27;amenity&#x27;: &#x27;place_of_worship&#x27;, &#x27;religion&#x27;: &#x27;hindu&#x27;}, &#x27;mosque&#x27;: {&#x27;amenity&#x27;: &#x27;place_of_worship&#x27;, &#x27;religion&#x27;: &#x27;muslim&#x27;}, &#x27;religious_destination&#x27;: {&#x27;amenity&#x27;: &#x27;place_of_worship&#x27;}, &#x27;shinto_shrines&#x27;: {&#x27;amenity&#x27;: &#x27;place_of_worship&#x27;, &#x27;religion&#x27;: &#x27;shinto&#x27;}, &#x27;sikh_temple&#x27;: {&#x27;amenity&#x27;: &#x27;place_of_worship&#x27;, &#x27;religion&#x27;: &#x27;sikh&#x27;}, &#x27;synagogue&#x27;: {&#x27;amenity&#x27;: &#x27;place_of_worship&#x27;, &#x27;religion&#x27;: &#x27;jewish&#x27;}, &#x27;temple&#x27;: {&#x27;building&#x27;: &#x27;temple&#x27;, &#x27;amenity&#x27;: &#x27;place_of_worship&#x27;}, &#x27;real_estate&#x27;: {&#x27;office&#x27;: &#x27;estate_agent&#x27;}, &#x27;real_estate_investment&#x27;: {&#x27;office&#x27;: &#x27;estate_agent&#x27;}, &#x27;apartments&#x27;: {&#x27;building&#x27;: &#x27;apartments&#x27;}, &#x27;condominium&#x27;: {&#x27;building&#x27;: &#x27;apartments&#x27;}, &#x27;property_management&#x27;: {&#x27;office&#x27;: &#x27;property_management&#x27;}, &#x27;real_estate_agent&#x27;: {&#x27;office&#x27;: &#x27;estate_agent&#x27;}, &#x27;rental_services&#x27;: {&#x27;shop&#x27;: &#x27;rental&#x27;}, &#x27;airport&#x27;: {&#x27;aeroway&#x27;: &#x27;aerodrome&#x27;}, &#x27;airport_terminal&#x27;: {&#x27;aeroway&#x27;: &#x27;terminal&#x27;}, &#x27;domestic_airports&#x27;: {&#x27;aeroway&#x27;: &#x27;aerodrome&#x27;, &#x27;aerodrome:type&#x27;: &#x27;regional&#x27;}, &#x27;heliports&#x27;: {&#x27;aeroway&#x27;: &#x27;heliport&#x27;}, &#x27;major_airports&#x27;: {&#x27;aeroway&#x27;: &#x27;aerodrome&#x27;, &#x27;aerodrome:type&#x27;: &#x27;international&#x27;}, &#x27;travel_agents&#x27;: {&#x27;shop&#x27;: &#x27;travel_agency&#x27;}, &#x27;visitor_center&#x27;: {&#x27;tourism&#x27;: &#x27;information&#x27;, &#x27;information&#x27;: &#x27;visitor_centre&#x27;}, &#x27;rest_areas&#x27;: {&#x27;highway&#x27;: &#x27;services&#x27;}, &#x27;toll_stations&#x27;: {&#x27;barrier&#x27;: &#x27;toll_booth&#x27;}, &#x27;train_station&#x27;: {&#x27;railway&#x27;: &#x27;station&#x27;, &#x27;public_transport&#x27;: &#x27;station&#x27;}, &#x27;bicycle_sharing_location&#x27;: {&#x27;amenity&#x27;: &#x27;bicycle_rental&#x27;}, &#x27;bike_parking&#x27;: {&#x27;amenity&#x27;: &#x27;bicycle_parking&#x27;}, &#x27;bike_sharing&#x27;: {&#x27;amenity&#x27;: &#x27;bicycle_rental&#x27;}, &#x27;bus_station&#x27;: {&#x27;amenity&#x27;: &#x27;bus_station&#x27;, &#x27;public_transport&#x27;: &#x27;station&#x27;}, &#x27;car_sharing&#x27;: {&#x27;amenity&#x27;: &#x27;car_sharing&#x27;}, &#x27;light_rail_and_subway_stations&#x27;: {&#x27;railway&#x27;: &#x27;station&#x27;, &#x27;public_transport&#x27;: &#x27;station&#x27;}, &#x27;metro_station&#x27;: {&#x27;railway&#x27;: &#x27;station&#x27;, &#x27;public_transport&#x27;: &#x27;station&#x27;}, &#x27;motorcycle_parking&#x27;: {&#x27;amenity&#x27;: &#x27;motorcycle_parking&#x27;}, &#x27;parking&#x27;: {&#x27;amenity&#x27;: &#x27;parking&#x27;}, &#x27;rental_service&#x27;: {&#x27;shop&#x27;: &#x27;rental&#x27;}, &#x27;car_rental_agency&#x27;: {&#x27;amenity&#x27;: &#x27;car_rental&#x27;}, &#x27;motorcycle_rentals&#x27;: {&#x27;shop&#x27;: &#x27;rental&#x27;, &#x27;rental&#x27;: &#x27;motorcycle&#x27;}, &#x27;rv_rentals&#x27;: {&#x27;shop&#x27;: &#x27;rental&#x27;, &#x27;rental&#x27;: &#x27;rv&#x27;}, &#x27;trailer_rentals&#x27;: {&#x27;shop&#x27;: &#x27;rental&#x27;, &#x27;rental&#x27;: &#x27;trailer&#x27;}, &#x27;truck_rentals&#x27;: {&#x27;shop&#x27;: &#x27;rental&#x27;, &#x27;rental&#x27;: &#x27;truck&#x27;}, &#x27;rest_stop&#x27;: {&#x27;highway&#x27;: &#x27;services&#x27;}, &#x27;broadcasting_media_production&#x27;: {&#x27;office&#x27;: &#x27;media&#x27;}, &#x27;home_service&#x27;: {&#x27;craft&#x27;: &#x27;yes&#x27;}, &#x27;roofing&#x27;: {&#x27;craft&#x27;: &#x27;roofer&#x27;}, &#x27;chimney_service&#x27;: {&#x27;craft&#x27;: &#x27;chimney_sweeper&#x27;}, &#x27;chimney_sweep&#x27;: {&#x27;craft&#x27;: &#x27;chimney_sweeper&#x27;}, &#x27;flooring_contractors&#x27;: {&#x27;craft&#x27;: &#x27;floorer&#x27;}, &#x27;carpenter&#x27;: {&#x27;craft&#x27;: &#x27;carpenter&#x27;}, &#x27;electrician&#x27;: {&#x27;craft&#x27;: &#x27;electrician&#x27;}, &#x27;insulation_installation&#x27;: {&#x27;craft&#x27;: &#x27;insulation&#x27;}, &#x27;key_and_locksmith&#x27;: {&#x27;shop&#x27;: &#x27;locksmith&#x27;}, &#x27;painting&#x27;: {&#x27;craft&#x27;: &#x27;painter&#x27;}, &#x27;plasterer&#x27;: {&#x27;craft&#x27;: &#x27;plasterer&#x27;}, &#x27;tiling&#x27;: {&#x27;craft&#x27;: &#x27;tiler&#x27;}, &#x27;landscaping&#x27;: {&#x27;craft&#x27;: &#x27;gardener&#x27;}, &#x27;gardener&#x27;: {&#x27;craft&#x27;: &#x27;gardener&#x27;}, &#x27;landscape_architect&#x27;: {&#x27;craft&#x27;: &#x27;gardener&#x27;}, &#x27;lawn_service&#x27;: {&#x27;craft&#x27;: &#x27;gardener&#x27;}, &#x27;tree_services&#x27;: {&#x27;craft&#x27;: &#x27;arborist&#x27;}, &#x27;professional_services&#x27;: {&#x27;craft&#x27;: &#x27;yes&#x27;}, &#x27;welders&#x27;: {&#x27;craft&#x27;: &#x27;welder&#x27;}, &#x27;stone_and_masonry&#x27;: {&#x27;craft&#x27;: &#x27;stonemason&#x27;}, &#x27;masonry_contractors&#x27;: {&#x27;craft&#x27;: &#x27;stonemason&#x27;}, &#x27;lawyer&#x27;: {&#x27;office&#x27;: &#x27;lawyer&#x27;}, &#x27;estate_planning_law&#x27;: {&#x27;office&#x27;: &#x27;lawyer&#x27;, &#x27;lawyer&#x27;: &#x27;estate_planning&#x27;}, &#x27;bankruptcy_law&#x27;: {&#x27;office&#x27;: &#x27;lawyer&#x27;, &#x27;lawyer&#x27;: &#x27;bankruptcy&#x27;}, &#x27;business_law&#x27;: {&#x27;office&#x27;: &#x27;lawyer&#x27;, &#x27;lawyer&#x27;: &#x27;business&#x27;}, &#x27;contract_law&#x27;: {&#x27;office&#x27;: &#x27;lawyer&#x27;, &#x27;lawyer&#x27;: &#x27;contract&#x27;}, &#x27;criminal_defense_law&#x27;: {&#x27;office&#x27;: &#x27;lawyer&#x27;, &#x27;lawyer&#x27;: &#x27;criminal_defense&#x27;}, &#x27;disability_law&#x27;: {&#x27;office&#x27;: &#x27;lawyer&#x27;, &#x27;lawyer&#x27;: &#x27;disability&#x27;}, &#x27;divorce_and_family_law&#x27;: {&#x27;office&#x27;: &#x27;lawyer&#x27;, &#x27;lawyer&#x27;: &#x27;divorce_and_family&#x27;}, &#x27;dui_law&#x27;: {&#x27;office&#x27;: &#x27;lawyer&#x27;, &#x27;lawyer&#x27;: &#x27;dui&#x27;}, &#x27;employment_law&#x27;: {&#x27;office&#x27;: &#x27;lawyer&#x27;, &#x27;lawyer&#x27;: &#x27;employment&#x27;}, &#x27;entertainment_law&#x27;: {&#x27;office&#x27;: &#x27;lawyer&#x27;, &#x27;lawyer&#x27;: &#x27;entertainment&#x27;}, &#x27;immigration_law&#x27;: {&#x27;office&#x27;: &#x27;lawyer&#x27;, &#x27;lawyer&#x27;: &#x27;immigration&#x27;}, &#x27;ip_and_internet_law&#x27;: {&#x27;office&#x27;: &#x27;lawyer&#x27;, &#x27;lawyer&#x27;: &#x27;ip_and_internet&#x27;}, &#x27;medical_law&#x27;: {&#x27;office&#x27;: &#x27;lawyer&#x27;, &#x27;lawyer&#x27;: &#x27;medical&#x27;}, &#x27;personal_injury_law&#x27;: {&#x27;office&#x27;: &#x27;lawyer&#x27;, &#x27;lawyer&#x27;: &#x27;personal_injury&#x27;}, &#x27;real_estate_law&#x27;: {&#x27;office&#x27;: &#x27;lawyer&#x27;, &#x27;lawyer&#x27;: &#x27;real_estate&#x27;}, &#x27;social_security_law&#x27;: {&#x27;office&#x27;: &#x27;lawyer&#x27;, &#x27;lawyer&#x27;: &#x27;social_security&#x27;}, &#x27;tax_law&#x27;: {&#x27;office&#x27;: &#x27;tax_advisor&#x27;}, &#x27;traffic_ticketing_law&#x27;: {&#x27;office&#x27;: &#x27;lawyer&#x27;, &#x27;lawyer&#x27;: &#x27;traffic_ticketing&#x27;}, &#x27;workers_compensation_law&#x27;: {&#x27;office&#x27;: &#x27;lawyer&#x27;, &#x27;lawyer&#x27;: &#x27;workers_compensation&#x27;}, &#x27;caterer&#x27;: {&#x27;craft&#x27;: &#x27;caterer&#x27;}, &#x27;photographer&#x27;: {&#x27;craft&#x27;: &#x27;photographer&#x27;}, &#x27;session_photography&#x27;: {&#x27;craft&#x27;: &#x27;photographer&#x27;}, &#x27;laundry_services&#x27;: {&#x27;shop&#x27;: &#x27;laundry&#x27;}, &#x27;dry_cleaning&#x27;: {&#x27;shop&#x27;: &#x27;laundry&#x27;, &#x27;dry_cleaning&#x27;: &#x27;yes&#x27;}, &#x27;laundromat&#x27;: {&#x27;shop&#x27;: &#x27;laundry&#x27;}, &#x27;advertising_agency&#x27;: {&#x27;office&#x27;: &#x27;advertising_agency&#x27;}, &#x27;architect&#x27;: {&#x27;office&#x27;: &#x27;architect&#x27;}, &#x27;architectural_designer&#x27;: {&#x27;office&#x27;: &#x27;architect&#x27;}, &#x27;bail_bonds_service&#x27;: {&#x27;office&#x27;: &#x27;bail_bond_agent&#x27;}, &#x27;car_broker&#x27;: {&#x27;shop&#x27;: &#x27;car&#x27;}, &#x27;day_care_preschool&#x27;: {&#x27;amenity&#x27;: &#x27;school&#x27;}, &#x27;computer_hardware_company&#x27;: {&#x27;shop&#x27;: &#x27;computer&#x27;}, &#x27;electronics_repair_shop&#x27;: {&#x27;craft&#x27;: &#x27;electronics_repair&#x27;}, &#x27;junkyard&#x27;: {&#x27;industrial&#x27;: &#x27;scrap_yard&#x27;}, &#x27;machine_and_tool_rentals&#x27;: {&#x27;shop&#x27;: &#x27;rental&#x27;, &#x27;rental&#x27;: &#x27;machines&#x27;}, &#x27;notary_public&#x27;: {&#x27;office&#x27;: &#x27;lawyer&#x27;, &#x27;lawyer&#x27;: &#x27;notary&#x27;}, &#x27;patent_law&#x27;: {&#x27;office&#x27;: &#x27;lawyer&#x27;, &#x27;lawyer&#x27;: &#x27;patent&#x27;}, &#x27;shoe_repair&#x27;: {&#x27;shop&#x27;: &#x27;shoe_repair&#x27;}, &#x27;software_development&#x27;: {&#x27;office&#x27;: &#x27;software&#x27;}, &#x27;tenant_and_eviction_law&#x27;: {&#x27;office&#x27;: &#x27;lawyer&#x27;, &#x27;lawyer&#x27;: &#x27;tenant_and_eviction&#x27;}, &#x27;self_storage_facility&#x27;: {&#x27;shop&#x27;: &#x27;storage_rental&#x27;}, &#x27;public_phones&#x27;: {&#x27;amenity&#x27;: &#x27;telephone&#x27;}, &#x27;public_restrooms&#x27;: {&#x27;amenity&#x27;: &#x27;toilets&#x27;, &#x27;access&#x27;: &#x27;yes&#x27;}, &#x27;structure_and_geography&#x27;: {&#x27;place&#x27;: &#x27;yes&#x27;}, &#x27;bridge&#x27;: {&#x27;man_made&#x27;: &#x27;bridge&#x27;}, &#x27;canal&#x27;: {&#x27;waterway&#x27;: &#x27;canal&#x27;}, &#x27;dam&#x27;: {&#x27;waterway&#x27;: &#x27;dam&#x27;}, &#x27;desert&#x27;: {&#x27;natural&#x27;: &#x27;desert&#x27;}, &#x27;forest&#x27;: {&#x27;natural&#x27;: &#x27;wood&#x27;}, &#x27;island&#x27;: {&#x27;place&#x27;: &#x27;island&#x27;}, &#x27;mountain&#x27;: {&#x27;natural&#x27;: &#x27;peak&#x27;}, &#x27;nature_reserve&#x27;: {&#x27;leisure&#x27;: &#x27;nature_reserve&#x27;}, &#x27;pier&#x27;: {&#x27;man_made&#x27;: &#x27;pier&#x27;}, &#x27;public_plaza&#x27;: {&#x27;place&#x27;: &#x27;square&#x27;}, &#x27;quay&#x27;: {&#x27;man_made&#x27;: &#x27;quay&#x27;}, &#x27;river&#x27;: {&#x27;waterway&#x27;: &#x27;river&#x27;}, &#x27;skyscraper&#x27;: {&#x27;building&#x27;: &#x27;yes&#x27;}, &#x27;tower&#x27;: {&#x27;man_made&#x27;: &#x27;tower&#x27;}, &#x27;weir&#x27;: {&#x27;waterway&#x27;: &#x27;weir&#x27;}}"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();